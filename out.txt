public static Item ACACIA_BOAT = register(new Item("acacia_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item ACACIA_BUTTON = register(new Item("acacia_button", Component.getBuilder().build()));
public static Item ACACIA_CHEST_BOAT = register(new Item("acacia_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item ACACIA_DOOR = register(new Item("acacia_door", Component.getBuilder().build()));
public static Item ACACIA_FENCE = register(new Item("acacia_fence", Component.getBuilder().build()));
public static Item ACACIA_FENCE_GATE = register(new Item("acacia_fence_gate", Component.getBuilder().build()));
public static Item ACACIA_HANGING_SIGN = register(new Item("acacia_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item ACACIA_LEAVES = register(new Item("acacia_leaves", Component.getBuilder().build()));
public static Item ACACIA_LOG = register(new Item("acacia_log", Component.getBuilder().build()));
public static Item ACACIA_PLANKS = register(new Item("acacia_planks", Component.getBuilder().build()));
public static Item ACACIA_PRESSURE_PLATE = register(new Item("acacia_pressure_plate", Component.getBuilder().build()));
public static Item ACACIA_SAPLING = register(new Item("acacia_sapling", Component.getBuilder().build()));
public static Item ACACIA_SIGN = register(new Item("acacia_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item ACACIA_SLAB = register(new Item("acacia_slab", Component.getBuilder().build()));
public static Item ACACIA_STAIRS = register(new Item("acacia_stairs", Component.getBuilder().build()));
public static Item ACACIA_TRAPDOOR = register(new Item("acacia_trapdoor", Component.getBuilder().build()));
public static Item ACACIA_WOOD = register(new Item("acacia_wood", Component.getBuilder().build()));
public static Item ACTIVATOR_RAIL = register(new Item("activator_rail", Component.getBuilder().build()));
public static Item AIR = register(new Item("air", Component.getBuilder().build()));
public static Item ALLAY_SPAWN_EGG = register(new Item("allay_spawn_egg", Component.getBuilder().build()));
public static Item ALLIUM = register(new Item("allium", Component.getBuilder().build()));
public static Item AMETHYST_BLOCK = register(new Item("amethyst_block", Component.getBuilder().build()));
public static Item AMETHYST_CLUSTER = register(new Item("amethyst_cluster", Component.getBuilder().build()));
public static Item AMETHYST_SHARD = register(new Item("amethyst_shard", Component.getBuilder().build()));
public static Item ANCIENT_DEBRIS = register(new Item("ancient_debris", Component.getBuilder().build()));
public static Item ANDESITE = register(new Item("andesite", Component.getBuilder().build()));
public static Item ANDESITE_SLAB = register(new Item("andesite_slab", Component.getBuilder().build()));
public static Item ANDESITE_STAIRS = register(new Item("andesite_stairs", Component.getBuilder().build()));
public static Item ANDESITE_WALL = register(new Item("andesite_wall", Component.getBuilder().build()));
public static Item ANGLER_POTTERY_SHERD = register(new Item("angler_pottery_sherd", Component.getBuilder().build()));
public static Item ANVIL = register(new Item("anvil", Component.getBuilder().build()));
public static Item APPLE = register(new Item("apple", Component.getBuilder().build()));
public static Item ARCHER_POTTERY_SHERD = register(new Item("archer_pottery_sherd", Component.getBuilder().build()));
public static Item ARMADILLO_SCUTE = register(new Item("armadillo_scute", Component.getBuilder().build()));
public static Item ARMADILLO_SPAWN_EGG = register(new Item("armadillo_spawn_egg", Component.getBuilder().build()));
public static Item ARMOR_STAND = register(new Item("armor_stand", Component.getBuilder().setMaxStackSize(16).build()));
public static Item ARMS_UP_POTTERY_SHERD = register(new Item("arms_up_pottery_sherd", Component.getBuilder().build()));
public static Item ARROW = register(new Item("arrow", Component.getBuilder().build()));
public static Item AXOLOTL_BUCKET = register(new Item("axolotl_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item AXOLOTL_SPAWN_EGG = register(new Item("axolotl_spawn_egg", Component.getBuilder().build()));
public static Item AZALEA = register(new Item("azalea", Component.getBuilder().build()));
public static Item AZALEA_LEAVES = register(new Item("azalea_leaves", Component.getBuilder().build()));
public static Item AZURE_BLUET = register(new Item("azure_bluet", Component.getBuilder().build()));
public static Item BAKED_POTATO = register(new Item("baked_potato", Component.getBuilder().build()));
public static Item BAMBOO = register(new Item("bamboo", Component.getBuilder().build()));
public static Item BAMBOO_BLOCK = register(new Item("bamboo_block", Component.getBuilder().build()));
public static Item BAMBOO_BUTTON = register(new Item("bamboo_button", Component.getBuilder().build()));
public static Item BAMBOO_CHEST_RAFT = register(new Item("bamboo_chest_raft", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BAMBOO_DOOR = register(new Item("bamboo_door", Component.getBuilder().build()));
public static Item BAMBOO_FENCE = register(new Item("bamboo_fence", Component.getBuilder().build()));
public static Item BAMBOO_FENCE_GATE = register(new Item("bamboo_fence_gate", Component.getBuilder().build()));
public static Item BAMBOO_HANGING_SIGN = register(new Item("bamboo_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BAMBOO_MOSAIC = register(new Item("bamboo_mosaic", Component.getBuilder().build()));
public static Item BAMBOO_MOSAIC_SLAB = register(new Item("bamboo_mosaic_slab", Component.getBuilder().build()));
public static Item BAMBOO_MOSAIC_STAIRS = register(new Item("bamboo_mosaic_stairs", Component.getBuilder().build()));
public static Item BAMBOO_PLANKS = register(new Item("bamboo_planks", Component.getBuilder().build()));
public static Item BAMBOO_PRESSURE_PLATE = register(new Item("bamboo_pressure_plate", Component.getBuilder().build()));
public static Item BAMBOO_RAFT = register(new Item("bamboo_raft", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BAMBOO_SIGN = register(new Item("bamboo_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BAMBOO_SLAB = register(new Item("bamboo_slab", Component.getBuilder().build()));
public static Item BAMBOO_STAIRS = register(new Item("bamboo_stairs", Component.getBuilder().build()));
public static Item BAMBOO_TRAPDOOR = register(new Item("bamboo_trapdoor", Component.getBuilder().build()));
public static Item BARREL = register(new Item("barrel", Component.getBuilder().build()));
public static Item BARRIER = register(new Item("barrier", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item BASALT = register(new Item("basalt", Component.getBuilder().build()));
public static Item BAT_SPAWN_EGG = register(new Item("bat_spawn_egg", Component.getBuilder().build()));
public static Item BEACON = register(new Item("beacon", Component.getBuilder().setRarity(Rarity.RARE).build()));
public static Item BEDROCK = register(new Item("bedrock", Component.getBuilder().build()));
public static Item BEE_NEST = register(new Item("bee_nest", Component.getBuilder().build()));
public static Item BEE_SPAWN_EGG = register(new Item("bee_spawn_egg", Component.getBuilder().build()));
public static Item BEEF = register(new Item("beef", Component.getBuilder().build()));
public static Item BEEHIVE = register(new Item("beehive", Component.getBuilder().build()));
public static Item BEETROOT = register(new Item("beetroot", Component.getBuilder().build()));
public static Item BEETROOT_SEEDS = register(new Item("beetroot_seeds", Component.getBuilder().build()));
public static Item BEETROOT_SOUP = register(new Item("beetroot_soup", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BELL = register(new Item("bell", Component.getBuilder().build()));
public static Item BIG_DRIPLEAF = register(new Item("big_dripleaf", Component.getBuilder().build()));
public static Item BIRCH_BOAT = register(new Item("birch_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BIRCH_BUTTON = register(new Item("birch_button", Component.getBuilder().build()));
public static Item BIRCH_CHEST_BOAT = register(new Item("birch_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BIRCH_DOOR = register(new Item("birch_door", Component.getBuilder().build()));
public static Item BIRCH_FENCE = register(new Item("birch_fence", Component.getBuilder().build()));
public static Item BIRCH_FENCE_GATE = register(new Item("birch_fence_gate", Component.getBuilder().build()));
public static Item BIRCH_HANGING_SIGN = register(new Item("birch_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BIRCH_LEAVES = register(new Item("birch_leaves", Component.getBuilder().build()));
public static Item BIRCH_LOG = register(new Item("birch_log", Component.getBuilder().build()));
public static Item BIRCH_PLANKS = register(new Item("birch_planks", Component.getBuilder().build()));
public static Item BIRCH_PRESSURE_PLATE = register(new Item("birch_pressure_plate", Component.getBuilder().build()));
public static Item BIRCH_SAPLING = register(new Item("birch_sapling", Component.getBuilder().build()));
public static Item BIRCH_SIGN = register(new Item("birch_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BIRCH_SLAB = register(new Item("birch_slab", Component.getBuilder().build()));
public static Item BIRCH_STAIRS = register(new Item("birch_stairs", Component.getBuilder().build()));
public static Item BIRCH_TRAPDOOR = register(new Item("birch_trapdoor", Component.getBuilder().build()));
public static Item BIRCH_WOOD = register(new Item("birch_wood", Component.getBuilder().build()));
public static Item BLACK_BANNER = register(new Item("black_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BLACK_BED = register(new Item("black_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BLACK_CANDLE = register(new Item("black_candle", Component.getBuilder().build()));
public static Item BLACK_CARPET = register(new Item("black_carpet", Component.getBuilder().build()));
public static Item BLACK_CONCRETE = register(new Item("black_concrete", Component.getBuilder().build()));
public static Item BLACK_CONCRETE_POWDER = register(new Item("black_concrete_powder", Component.getBuilder().build()));
public static Item BLACK_DYE = register(new Item("black_dye", Component.getBuilder().build()));
public static Item BLACK_GLAZED_TERRACOTTA = register(new Item("black_glazed_terracotta", Component.getBuilder().build()));
public static Item BLACK_SHULKER_BOX = register(new Item("black_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BLACK_STAINED_GLASS = register(new Item("black_stained_glass", Component.getBuilder().build()));
public static Item BLACK_STAINED_GLASS_PANE = register(new Item("black_stained_glass_pane", Component.getBuilder().build()));
public static Item BLACK_TERRACOTTA = register(new Item("black_terracotta", Component.getBuilder().build()));
public static Item BLACK_WOOL = register(new Item("black_wool", Component.getBuilder().build()));
public static Item BLACKSTONE = register(new Item("blackstone", Component.getBuilder().build()));
public static Item BLACKSTONE_SLAB = register(new Item("blackstone_slab", Component.getBuilder().build()));
public static Item BLACKSTONE_STAIRS = register(new Item("blackstone_stairs", Component.getBuilder().build()));
public static Item BLACKSTONE_WALL = register(new Item("blackstone_wall", Component.getBuilder().build()));
public static Item BLADE_POTTERY_SHERD = register(new Item("blade_pottery_sherd", Component.getBuilder().build()));
public static Item BLAST_FURNACE = register(new Item("blast_furnace", Component.getBuilder().build()));
public static Item BLAZE_POWDER = register(new Item("blaze_powder", Component.getBuilder().build()));
public static Item BLAZE_ROD = register(new Item("blaze_rod", Component.getBuilder().build()));
public static Item BLAZE_SPAWN_EGG = register(new Item("blaze_spawn_egg", Component.getBuilder().build()));
public static Item BLUE_BANNER = register(new Item("blue_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BLUE_BED = register(new Item("blue_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BLUE_CANDLE = register(new Item("blue_candle", Component.getBuilder().build()));
public static Item BLUE_CARPET = register(new Item("blue_carpet", Component.getBuilder().build()));
public static Item BLUE_CONCRETE = register(new Item("blue_concrete", Component.getBuilder().build()));
public static Item BLUE_CONCRETE_POWDER = register(new Item("blue_concrete_powder", Component.getBuilder().build()));
public static Item BLUE_DYE = register(new Item("blue_dye", Component.getBuilder().build()));
public static Item BLUE_GLAZED_TERRACOTTA = register(new Item("blue_glazed_terracotta", Component.getBuilder().build()));
public static Item BLUE_ICE = register(new Item("blue_ice", Component.getBuilder().build()));
public static Item BLUE_ORCHID = register(new Item("blue_orchid", Component.getBuilder().build()));
public static Item BLUE_SHULKER_BOX = register(new Item("blue_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BLUE_STAINED_GLASS = register(new Item("blue_stained_glass", Component.getBuilder().build()));
public static Item BLUE_STAINED_GLASS_PANE = register(new Item("blue_stained_glass_pane", Component.getBuilder().build()));
public static Item BLUE_TERRACOTTA = register(new Item("blue_terracotta", Component.getBuilder().build()));
public static Item BLUE_WOOL = register(new Item("blue_wool", Component.getBuilder().build()));
public static Item BOGGED_SPAWN_EGG = register(new Item("bogged_spawn_egg", Component.getBuilder().build()));
public static Item BOLT_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("bolt_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item BONE = register(new Item("bone", Component.getBuilder().build()));
public static Item BONE_BLOCK = register(new Item("bone_block", Component.getBuilder().build()));
public static Item BONE_MEAL = register(new Item("bone_meal", Component.getBuilder().build()));
public static Item BOOK = register(new Item("book", Component.getBuilder().build()));
public static Item BOOKSHELF = register(new Item("bookshelf", Component.getBuilder().build()));
public static Item BOW = register(new Item("bow", Component.getBuilder().setMaxDamage(384).setMaxStackSize(1).build()));
public static Item BOWL = register(new Item("bowl", Component.getBuilder().build()));
public static Item BRAIN_CORAL = register(new Item("brain_coral", Component.getBuilder().build()));
public static Item BRAIN_CORAL_BLOCK = register(new Item("brain_coral_block", Component.getBuilder().build()));
public static Item BRAIN_CORAL_FAN = register(new Item("brain_coral_fan", Component.getBuilder().build()));
public static Item BREAD = register(new Item("bread", Component.getBuilder().build()));
public static Item BREEZE_ROD = register(new Item("breeze_rod", Component.getBuilder().build()));
public static Item BREEZE_SPAWN_EGG = register(new Item("breeze_spawn_egg", Component.getBuilder().build()));
public static Item BREWER_POTTERY_SHERD = register(new Item("brewer_pottery_sherd", Component.getBuilder().build()));
public static Item BREWING_STAND = register(new Item("brewing_stand", Component.getBuilder().build()));
public static Item BRICK = register(new Item("brick", Component.getBuilder().build()));
public static Item BRICK_SLAB = register(new Item("brick_slab", Component.getBuilder().build()));
public static Item BRICK_STAIRS = register(new Item("brick_stairs", Component.getBuilder().build()));
public static Item BRICK_WALL = register(new Item("brick_wall", Component.getBuilder().build()));
public static Item BRICKS = register(new Item("bricks", Component.getBuilder().build()));
public static Item BROWN_BANNER = register(new Item("brown_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BROWN_BED = register(new Item("brown_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BROWN_CANDLE = register(new Item("brown_candle", Component.getBuilder().build()));
public static Item BROWN_CARPET = register(new Item("brown_carpet", Component.getBuilder().build()));
public static Item BROWN_CONCRETE = register(new Item("brown_concrete", Component.getBuilder().build()));
public static Item BROWN_CONCRETE_POWDER = register(new Item("brown_concrete_powder", Component.getBuilder().build()));
public static Item BROWN_DYE = register(new Item("brown_dye", Component.getBuilder().build()));
public static Item BROWN_GLAZED_TERRACOTTA = register(new Item("brown_glazed_terracotta", Component.getBuilder().build()));
public static Item BROWN_MUSHROOM = register(new Item("brown_mushroom", Component.getBuilder().build()));
public static Item BROWN_MUSHROOM_BLOCK = register(new Item("brown_mushroom_block", Component.getBuilder().build()));
public static Item BROWN_SHULKER_BOX = register(new Item("brown_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BROWN_STAINED_GLASS = register(new Item("brown_stained_glass", Component.getBuilder().build()));
public static Item BROWN_STAINED_GLASS_PANE = register(new Item("brown_stained_glass_pane", Component.getBuilder().build()));
public static Item BROWN_TERRACOTTA = register(new Item("brown_terracotta", Component.getBuilder().build()));
public static Item BROWN_WOOL = register(new Item("brown_wool", Component.getBuilder().build()));
public static Item BRUSH = register(new Item("brush", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
public static Item BUBBLE_CORAL = register(new Item("bubble_coral", Component.getBuilder().build()));
public static Item BUBBLE_CORAL_BLOCK = register(new Item("bubble_coral_block", Component.getBuilder().build()));
public static Item BUBBLE_CORAL_FAN = register(new Item("bubble_coral_fan", Component.getBuilder().build()));
public static Item BUCKET = register(new Item("bucket", Component.getBuilder().setMaxStackSize(16).build()));
public static Item BUDDING_AMETHYST = register(new Item("budding_amethyst", Component.getBuilder().build()));
public static Item BUNDLE = register(new Item("bundle", Component.getBuilder().setMaxStackSize(1).build()));
public static Item BURN_POTTERY_SHERD = register(new Item("burn_pottery_sherd", Component.getBuilder().build()));
public static Item CACTUS = register(new Item("cactus", Component.getBuilder().build()));
public static Item CAKE = register(new Item("cake", Component.getBuilder().setMaxStackSize(1).build()));
public static Item CALCITE = register(new Item("calcite", Component.getBuilder().build()));
public static Item CALIBRATED_SCULK_SENSOR = register(new Item("calibrated_sculk_sensor", Component.getBuilder().build()));
public static Item CAMEL_SPAWN_EGG = register(new Item("camel_spawn_egg", Component.getBuilder().build()));
public static Item CAMPFIRE = register(new Item("campfire", Component.getBuilder().build()));
public static Item CANDLE = register(new Item("candle", Component.getBuilder().build()));
public static Item CARROT = register(new Item("carrot", Component.getBuilder().build()));
public static Item CARROT_ON_A_STICK = register(new Item("carrot_on_a_stick", Component.getBuilder().setMaxDamage(25).setMaxStackSize(1).build()));
public static Item CARTOGRAPHY_TABLE = register(new Item("cartography_table", Component.getBuilder().build()));
public static Item CARVED_PUMPKIN = register(new Item("carved_pumpkin", Component.getBuilder().build()));
public static Item CAT_SPAWN_EGG = register(new Item("cat_spawn_egg", Component.getBuilder().build()));
public static Item CAULDRON = register(new Item("cauldron", Component.getBuilder().build()));
public static Item CAVE_SPIDER_SPAWN_EGG = register(new Item("cave_spider_spawn_egg", Component.getBuilder().build()));
public static Item CHAIN = register(new Item("chain", Component.getBuilder().build()));
public static Item CHAIN_COMMAND_BLOCK = register(new Item("chain_command_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item CHAINMAIL_BOOTS = register(new Item("chainmail_boots", Component.getBuilder().setMaxDamage(195).setMaxStackSize(1).build()));
public static Item CHAINMAIL_CHESTPLATE = register(new Item("chainmail_chestplate", Component.getBuilder().setMaxDamage(240).setMaxStackSize(1).build()));
public static Item CHAINMAIL_HELMET = register(new Item("chainmail_helmet", Component.getBuilder().setMaxDamage(165).setMaxStackSize(1).build()));
public static Item CHAINMAIL_LEGGINGS = register(new Item("chainmail_leggings", Component.getBuilder().setMaxDamage(225).setMaxStackSize(1).build()));
public static Item CHARCOAL = register(new Item("charcoal", Component.getBuilder().build()));
public static Item CHERRY_BOAT = register(new Item("cherry_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item CHERRY_BUTTON = register(new Item("cherry_button", Component.getBuilder().build()));
public static Item CHERRY_CHEST_BOAT = register(new Item("cherry_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item CHERRY_DOOR = register(new Item("cherry_door", Component.getBuilder().build()));
public static Item CHERRY_FENCE = register(new Item("cherry_fence", Component.getBuilder().build()));
public static Item CHERRY_FENCE_GATE = register(new Item("cherry_fence_gate", Component.getBuilder().build()));
public static Item CHERRY_HANGING_SIGN = register(new Item("cherry_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item CHERRY_LEAVES = register(new Item("cherry_leaves", Component.getBuilder().build()));
public static Item CHERRY_LOG = register(new Item("cherry_log", Component.getBuilder().build()));
public static Item CHERRY_PLANKS = register(new Item("cherry_planks", Component.getBuilder().build()));
public static Item CHERRY_PRESSURE_PLATE = register(new Item("cherry_pressure_plate", Component.getBuilder().build()));
public static Item CHERRY_SAPLING = register(new Item("cherry_sapling", Component.getBuilder().build()));
public static Item CHERRY_SIGN = register(new Item("cherry_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item CHERRY_SLAB = register(new Item("cherry_slab", Component.getBuilder().build()));
public static Item CHERRY_STAIRS = register(new Item("cherry_stairs", Component.getBuilder().build()));
public static Item CHERRY_TRAPDOOR = register(new Item("cherry_trapdoor", Component.getBuilder().build()));
public static Item CHERRY_WOOD = register(new Item("cherry_wood", Component.getBuilder().build()));
public static Item CHEST = register(new Item("chest", Component.getBuilder().build()));
public static Item CHEST_MINECART = register(new Item("chest_minecart", Component.getBuilder().setMaxStackSize(1).build()));
public static Item CHICKEN = register(new Item("chicken", Component.getBuilder().build()));
public static Item CHICKEN_SPAWN_EGG = register(new Item("chicken_spawn_egg", Component.getBuilder().build()));
public static Item CHIPPED_ANVIL = register(new Item("chipped_anvil", Component.getBuilder().build()));
public static Item CHISELED_BOOKSHELF = register(new Item("chiseled_bookshelf", Component.getBuilder().build()));
public static Item CHISELED_COPPER = register(new Item("chiseled_copper", Component.getBuilder().build()));
public static Item CHISELED_DEEPSLATE = register(new Item("chiseled_deepslate", Component.getBuilder().build()));
public static Item CHISELED_NETHER_BRICKS = register(new Item("chiseled_nether_bricks", Component.getBuilder().build()));
public static Item CHISELED_POLISHED_BLACKSTONE = register(new Item("chiseled_polished_blackstone", Component.getBuilder().build()));
public static Item CHISELED_QUARTZ_BLOCK = register(new Item("chiseled_quartz_block", Component.getBuilder().build()));
public static Item CHISELED_RED_SANDSTONE = register(new Item("chiseled_red_sandstone", Component.getBuilder().build()));
public static Item CHISELED_SANDSTONE = register(new Item("chiseled_sandstone", Component.getBuilder().build()));
public static Item CHISELED_STONE_BRICKS = register(new Item("chiseled_stone_bricks", Component.getBuilder().build()));
public static Item CHISELED_TUFF = register(new Item("chiseled_tuff", Component.getBuilder().build()));
public static Item CHISELED_TUFF_BRICKS = register(new Item("chiseled_tuff_bricks", Component.getBuilder().build()));
public static Item CHORUS_FLOWER = register(new Item("chorus_flower", Component.getBuilder().build()));
public static Item CHORUS_FRUIT = register(new Item("chorus_fruit", Component.getBuilder().build()));
public static Item CHORUS_PLANT = register(new Item("chorus_plant", Component.getBuilder().build()));
public static Item CLAY = register(new Item("clay", Component.getBuilder().build()));
public static Item CLAY_BALL = register(new Item("clay_ball", Component.getBuilder().build()));
public static Item CLOCK = register(new Item("clock", Component.getBuilder().build()));
public static Item COAL = register(new Item("coal", Component.getBuilder().build()));
public static Item COAL_BLOCK = register(new Item("coal_block", Component.getBuilder().build()));
public static Item COAL_ORE = register(new Item("coal_ore", Component.getBuilder().build()));
public static Item COARSE_DIRT = register(new Item("coarse_dirt", Component.getBuilder().build()));
public static Item COAST_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("coast_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item COBBLED_DEEPSLATE = register(new Item("cobbled_deepslate", Component.getBuilder().build()));
public static Item COBBLED_DEEPSLATE_SLAB = register(new Item("cobbled_deepslate_slab", Component.getBuilder().build()));
public static Item COBBLED_DEEPSLATE_STAIRS = register(new Item("cobbled_deepslate_stairs", Component.getBuilder().build()));
public static Item COBBLED_DEEPSLATE_WALL = register(new Item("cobbled_deepslate_wall", Component.getBuilder().build()));
public static Item COBBLESTONE = register(new Item("cobblestone", Component.getBuilder().build()));
public static Item COBBLESTONE_SLAB = register(new Item("cobblestone_slab", Component.getBuilder().build()));
public static Item COBBLESTONE_STAIRS = register(new Item("cobblestone_stairs", Component.getBuilder().build()));
public static Item COBBLESTONE_WALL = register(new Item("cobblestone_wall", Component.getBuilder().build()));
public static Item COBWEB = register(new Item("cobweb", Component.getBuilder().build()));
public static Item COCOA_BEANS = register(new Item("cocoa_beans", Component.getBuilder().build()));
public static Item COD = register(new Item("cod", Component.getBuilder().build()));
public static Item COD_BUCKET = register(new Item("cod_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item COD_SPAWN_EGG = register(new Item("cod_spawn_egg", Component.getBuilder().build()));
public static Item COMMAND_BLOCK = register(new Item("command_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item COMMAND_BLOCK_MINECART = register(new Item("command_block_minecart", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
public static Item COMPARATOR = register(new Item("comparator", Component.getBuilder().build()));
public static Item COMPASS = register(new Item("compass", Component.getBuilder().build()));
public static Item COMPOSTER = register(new Item("composter", Component.getBuilder().build()));
public static Item CONDUIT = register(new Item("conduit", Component.getBuilder().setRarity(Rarity.RARE).build()));
public static Item COOKED_BEEF = register(new Item("cooked_beef", Component.getBuilder().build()));
public static Item COOKED_CHICKEN = register(new Item("cooked_chicken", Component.getBuilder().build()));
public static Item COOKED_COD = register(new Item("cooked_cod", Component.getBuilder().build()));
public static Item COOKED_MUTTON = register(new Item("cooked_mutton", Component.getBuilder().build()));
public static Item COOKED_PORKCHOP = register(new Item("cooked_porkchop", Component.getBuilder().build()));
public static Item COOKED_RABBIT = register(new Item("cooked_rabbit", Component.getBuilder().build()));
public static Item COOKED_SALMON = register(new Item("cooked_salmon", Component.getBuilder().build()));
public static Item COOKIE = register(new Item("cookie", Component.getBuilder().build()));
public static Item COPPER_BLOCK = register(new Item("copper_block", Component.getBuilder().build()));
public static Item COPPER_BULB = register(new Item("copper_bulb", Component.getBuilder().build()));
public static Item COPPER_DOOR = register(new Item("copper_door", Component.getBuilder().build()));
public static Item COPPER_GRATE = register(new Item("copper_grate", Component.getBuilder().build()));
public static Item COPPER_INGOT = register(new Item("copper_ingot", Component.getBuilder().build()));
public static Item COPPER_ORE = register(new Item("copper_ore", Component.getBuilder().build()));
public static Item COPPER_TRAPDOOR = register(new Item("copper_trapdoor", Component.getBuilder().build()));
public static Item CORNFLOWER = register(new Item("cornflower", Component.getBuilder().build()));
public static Item COW_SPAWN_EGG = register(new Item("cow_spawn_egg", Component.getBuilder().build()));
public static Item CRACKED_DEEPSLATE_BRICKS = register(new Item("cracked_deepslate_bricks", Component.getBuilder().build()));
public static Item CRACKED_DEEPSLATE_TILES = register(new Item("cracked_deepslate_tiles", Component.getBuilder().build()));
public static Item CRACKED_NETHER_BRICKS = register(new Item("cracked_nether_bricks", Component.getBuilder().build()));
public static Item CRACKED_POLISHED_BLACKSTONE_BRICKS = register(new Item("cracked_polished_blackstone_bricks", Component.getBuilder().build()));
public static Item CRACKED_STONE_BRICKS = register(new Item("cracked_stone_bricks", Component.getBuilder().build()));
public static Item CRAFTER = register(new Item("crafter", Component.getBuilder().build()));
public static Item CRAFTING_TABLE = register(new Item("crafting_table", Component.getBuilder().build()));
public static Item CREEPER_BANNER_PATTERN = register(new Item("creeper_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
public static Item CREEPER_HEAD = register(new Item("creeper_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item CREEPER_SPAWN_EGG = register(new Item("creeper_spawn_egg", Component.getBuilder().build()));
public static Item CRIMSON_BUTTON = register(new Item("crimson_button", Component.getBuilder().build()));
public static Item CRIMSON_DOOR = register(new Item("crimson_door", Component.getBuilder().build()));
public static Item CRIMSON_FENCE = register(new Item("crimson_fence", Component.getBuilder().build()));
public static Item CRIMSON_FENCE_GATE = register(new Item("crimson_fence_gate", Component.getBuilder().build()));
public static Item CRIMSON_FUNGUS = register(new Item("crimson_fungus", Component.getBuilder().build()));
public static Item CRIMSON_HANGING_SIGN = register(new Item("crimson_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item CRIMSON_HYPHAE = register(new Item("crimson_hyphae", Component.getBuilder().build()));
public static Item CRIMSON_NYLIUM = register(new Item("crimson_nylium", Component.getBuilder().build()));
public static Item CRIMSON_PLANKS = register(new Item("crimson_planks", Component.getBuilder().build()));
public static Item CRIMSON_PRESSURE_PLATE = register(new Item("crimson_pressure_plate", Component.getBuilder().build()));
public static Item CRIMSON_ROOTS = register(new Item("crimson_roots", Component.getBuilder().build()));
public static Item CRIMSON_SIGN = register(new Item("crimson_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item CRIMSON_SLAB = register(new Item("crimson_slab", Component.getBuilder().build()));
public static Item CRIMSON_STAIRS = register(new Item("crimson_stairs", Component.getBuilder().build()));
public static Item CRIMSON_STEM = register(new Item("crimson_stem", Component.getBuilder().build()));
public static Item CRIMSON_TRAPDOOR = register(new Item("crimson_trapdoor", Component.getBuilder().build()));
public static Item CROSSBOW = register(new Item("crossbow", Component.getBuilder().setMaxDamage(465).setMaxStackSize(1).build()));
public static Item CRYING_OBSIDIAN = register(new Item("crying_obsidian", Component.getBuilder().build()));
public static Item CUT_COPPER = register(new Item("cut_copper", Component.getBuilder().build()));
public static Item CUT_COPPER_SLAB = register(new Item("cut_copper_slab", Component.getBuilder().build()));
public static Item CUT_COPPER_STAIRS = register(new Item("cut_copper_stairs", Component.getBuilder().build()));
public static Item CUT_RED_SANDSTONE = register(new Item("cut_red_sandstone", Component.getBuilder().build()));
public static Item CUT_RED_SANDSTONE_SLAB = register(new Item("cut_red_sandstone_slab", Component.getBuilder().build()));
public static Item CUT_SANDSTONE = register(new Item("cut_sandstone", Component.getBuilder().build()));
public static Item CUT_SANDSTONE_SLAB = register(new Item("cut_sandstone_slab", Component.getBuilder().build()));
public static Item CYAN_BANNER = register(new Item("cyan_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item CYAN_BED = register(new Item("cyan_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item CYAN_CANDLE = register(new Item("cyan_candle", Component.getBuilder().build()));
public static Item CYAN_CARPET = register(new Item("cyan_carpet", Component.getBuilder().build()));
public static Item CYAN_CONCRETE = register(new Item("cyan_concrete", Component.getBuilder().build()));
public static Item CYAN_CONCRETE_POWDER = register(new Item("cyan_concrete_powder", Component.getBuilder().build()));
public static Item CYAN_DYE = register(new Item("cyan_dye", Component.getBuilder().build()));
public static Item CYAN_GLAZED_TERRACOTTA = register(new Item("cyan_glazed_terracotta", Component.getBuilder().build()));
public static Item CYAN_SHULKER_BOX = register(new Item("cyan_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item CYAN_STAINED_GLASS = register(new Item("cyan_stained_glass", Component.getBuilder().build()));
public static Item CYAN_STAINED_GLASS_PANE = register(new Item("cyan_stained_glass_pane", Component.getBuilder().build()));
public static Item CYAN_TERRACOTTA = register(new Item("cyan_terracotta", Component.getBuilder().build()));
public static Item CYAN_WOOL = register(new Item("cyan_wool", Component.getBuilder().build()));
public static Item DAMAGED_ANVIL = register(new Item("damaged_anvil", Component.getBuilder().build()));
public static Item DANDELION = register(new Item("dandelion", Component.getBuilder().build()));
public static Item DANGER_POTTERY_SHERD = register(new Item("danger_pottery_sherd", Component.getBuilder().build()));
public static Item DARK_OAK_BOAT = register(new Item("dark_oak_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item DARK_OAK_BUTTON = register(new Item("dark_oak_button", Component.getBuilder().build()));
public static Item DARK_OAK_CHEST_BOAT = register(new Item("dark_oak_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item DARK_OAK_DOOR = register(new Item("dark_oak_door", Component.getBuilder().build()));
public static Item DARK_OAK_FENCE = register(new Item("dark_oak_fence", Component.getBuilder().build()));
public static Item DARK_OAK_FENCE_GATE = register(new Item("dark_oak_fence_gate", Component.getBuilder().build()));
public static Item DARK_OAK_HANGING_SIGN = register(new Item("dark_oak_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item DARK_OAK_LEAVES = register(new Item("dark_oak_leaves", Component.getBuilder().build()));
public static Item DARK_OAK_LOG = register(new Item("dark_oak_log", Component.getBuilder().build()));
public static Item DARK_OAK_PLANKS = register(new Item("dark_oak_planks", Component.getBuilder().build()));
public static Item DARK_OAK_PRESSURE_PLATE = register(new Item("dark_oak_pressure_plate", Component.getBuilder().build()));
public static Item DARK_OAK_SAPLING = register(new Item("dark_oak_sapling", Component.getBuilder().build()));
public static Item DARK_OAK_SIGN = register(new Item("dark_oak_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item DARK_OAK_SLAB = register(new Item("dark_oak_slab", Component.getBuilder().build()));
public static Item DARK_OAK_STAIRS = register(new Item("dark_oak_stairs", Component.getBuilder().build()));
public static Item DARK_OAK_TRAPDOOR = register(new Item("dark_oak_trapdoor", Component.getBuilder().build()));
public static Item DARK_OAK_WOOD = register(new Item("dark_oak_wood", Component.getBuilder().build()));
public static Item DARK_PRISMARINE = register(new Item("dark_prismarine", Component.getBuilder().build()));
public static Item DARK_PRISMARINE_SLAB = register(new Item("dark_prismarine_slab", Component.getBuilder().build()));
public static Item DARK_PRISMARINE_STAIRS = register(new Item("dark_prismarine_stairs", Component.getBuilder().build()));
public static Item DAYLIGHT_DETECTOR = register(new Item("daylight_detector", Component.getBuilder().build()));
public static Item DEAD_BRAIN_CORAL = register(new Item("dead_brain_coral", Component.getBuilder().build()));
public static Item DEAD_BRAIN_CORAL_BLOCK = register(new Item("dead_brain_coral_block", Component.getBuilder().build()));
public static Item DEAD_BRAIN_CORAL_FAN = register(new Item("dead_brain_coral_fan", Component.getBuilder().build()));
public static Item DEAD_BUBBLE_CORAL = register(new Item("dead_bubble_coral", Component.getBuilder().build()));
public static Item DEAD_BUBBLE_CORAL_BLOCK = register(new Item("dead_bubble_coral_block", Component.getBuilder().build()));
public static Item DEAD_BUBBLE_CORAL_FAN = register(new Item("dead_bubble_coral_fan", Component.getBuilder().build()));
public static Item DEAD_BUSH = register(new Item("dead_bush", Component.getBuilder().build()));
public static Item DEAD_FIRE_CORAL = register(new Item("dead_fire_coral", Component.getBuilder().build()));
public static Item DEAD_FIRE_CORAL_BLOCK = register(new Item("dead_fire_coral_block", Component.getBuilder().build()));
public static Item DEAD_FIRE_CORAL_FAN = register(new Item("dead_fire_coral_fan", Component.getBuilder().build()));
public static Item DEAD_HORN_CORAL = register(new Item("dead_horn_coral", Component.getBuilder().build()));
public static Item DEAD_HORN_CORAL_BLOCK = register(new Item("dead_horn_coral_block", Component.getBuilder().build()));
public static Item DEAD_HORN_CORAL_FAN = register(new Item("dead_horn_coral_fan", Component.getBuilder().build()));
public static Item DEAD_TUBE_CORAL = register(new Item("dead_tube_coral", Component.getBuilder().build()));
public static Item DEAD_TUBE_CORAL_BLOCK = register(new Item("dead_tube_coral_block", Component.getBuilder().build()));
public static Item DEAD_TUBE_CORAL_FAN = register(new Item("dead_tube_coral_fan", Component.getBuilder().build()));
public static Item DEBUG_STICK = register(new Item("debug_stick", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).setEnchantmentGlintOverride(true).build()));
public static Item DECORATED_POT = register(new Item("decorated_pot", Component.getBuilder().build()));
public static Item DEEPSLATE = register(new Item("deepslate", Component.getBuilder().build()));
public static Item DEEPSLATE_BRICK_SLAB = register(new Item("deepslate_brick_slab", Component.getBuilder().build()));
public static Item DEEPSLATE_BRICK_STAIRS = register(new Item("deepslate_brick_stairs", Component.getBuilder().build()));
public static Item DEEPSLATE_BRICK_WALL = register(new Item("deepslate_brick_wall", Component.getBuilder().build()));
public static Item DEEPSLATE_BRICKS = register(new Item("deepslate_bricks", Component.getBuilder().build()));
public static Item DEEPSLATE_COAL_ORE = register(new Item("deepslate_coal_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_COPPER_ORE = register(new Item("deepslate_copper_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_DIAMOND_ORE = register(new Item("deepslate_diamond_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_EMERALD_ORE = register(new Item("deepslate_emerald_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_GOLD_ORE = register(new Item("deepslate_gold_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_IRON_ORE = register(new Item("deepslate_iron_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_LAPIS_ORE = register(new Item("deepslate_lapis_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_REDSTONE_ORE = register(new Item("deepslate_redstone_ore", Component.getBuilder().build()));
public static Item DEEPSLATE_TILE_SLAB = register(new Item("deepslate_tile_slab", Component.getBuilder().build()));
public static Item DEEPSLATE_TILE_STAIRS = register(new Item("deepslate_tile_stairs", Component.getBuilder().build()));
public static Item DEEPSLATE_TILE_WALL = register(new Item("deepslate_tile_wall", Component.getBuilder().build()));
public static Item DEEPSLATE_TILES = register(new Item("deepslate_tiles", Component.getBuilder().build()));
public static Item DETECTOR_RAIL = register(new Item("detector_rail", Component.getBuilder().build()));
public static Item DIAMOND = register(new Item("diamond", Component.getBuilder().build()));
public static Item DIAMOND_AXE = register(new Item("diamond_axe", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 8.0d)).setDamagePerBlock(2)).build()));
public static Item DIAMOND_BLOCK = register(new Item("diamond_block", Component.getBuilder().build()));
public static Item DIAMOND_BOOTS = register(new Item("diamond_boots", Component.getBuilder().setMaxDamage(429).setMaxStackSize(1).build()));
public static Item DIAMOND_CHESTPLATE = register(new Item("diamond_chestplate", Component.getBuilder().setMaxDamage(528).setMaxStackSize(1).build()));
public static Item DIAMOND_HELMET = register(new Item("diamond_helmet", Component.getBuilder().setMaxDamage(363).setMaxStackSize(1).build()));
public static Item DIAMOND_HOE = register(new Item("diamond_hoe", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 8.0d)).setDamagePerBlock(2)).build()));
public static Item DIAMOND_HORSE_ARMOR = register(new Item("diamond_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
public static Item DIAMOND_LEGGINGS = register(new Item("diamond_leggings", Component.getBuilder().setMaxDamage(495).setMaxStackSize(1).build()));
public static Item DIAMOND_ORE = register(new Item("diamond_ore", Component.getBuilder().build()));
public static Item DIAMOND_PICKAXE = register(new Item("diamond_pickaxe", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 8.0d)).setDamagePerBlock(2)).build()));
public static Item DIAMOND_SHOVEL = register(new Item("diamond_shovel", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 8.0d)).setDamagePerBlock(2)).build()));
public static Item DIAMOND_SWORD = register(new Item("diamond_sword", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
public static Item DIORITE = register(new Item("diorite", Component.getBuilder().build()));
public static Item DIORITE_SLAB = register(new Item("diorite_slab", Component.getBuilder().build()));
public static Item DIORITE_STAIRS = register(new Item("diorite_stairs", Component.getBuilder().build()));
public static Item DIORITE_WALL = register(new Item("diorite_wall", Component.getBuilder().build()));
public static Item DIRT = register(new Item("dirt", Component.getBuilder().build()));
public static Item DIRT_PATH = register(new Item("dirt_path", Component.getBuilder().build()));
public static Item DISC_FRAGMENT_5 = register(new Item("disc_fragment_5", Component.getBuilder().build()));
public static Item DISPENSER = register(new Item("dispenser", Component.getBuilder().build()));
public static Item DOLPHIN_SPAWN_EGG = register(new Item("dolphin_spawn_egg", Component.getBuilder().build()));
public static Item DONKEY_SPAWN_EGG = register(new Item("donkey_spawn_egg", Component.getBuilder().build()));
public static Item DRAGON_BREATH = register(new Item("dragon_breath", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item DRAGON_EGG = register(new Item("dragon_egg", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item DRAGON_HEAD = register(new Item("dragon_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item DRIED_KELP = register(new Item("dried_kelp", Component.getBuilder().build()));
public static Item DRIED_KELP_BLOCK = register(new Item("dried_kelp_block", Component.getBuilder().build()));
public static Item DRIPSTONE_BLOCK = register(new Item("dripstone_block", Component.getBuilder().build()));
public static Item DROPPER = register(new Item("dropper", Component.getBuilder().build()));
public static Item DROWNED_SPAWN_EGG = register(new Item("drowned_spawn_egg", Component.getBuilder().build()));
public static Item DUNE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("dune_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item ECHO_SHARD = register(new Item("echo_shard", Component.getBuilder().build()));
public static Item EGG = register(new Item("egg", Component.getBuilder().setMaxStackSize(16).build()));
public static Item ELDER_GUARDIAN_SPAWN_EGG = register(new Item("elder_guardian_spawn_egg", Component.getBuilder().build()));
public static Item ELYTRA = register(new Item("elytra", Component.getBuilder().setMaxDamage(432).setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
public static Item EMERALD = register(new Item("emerald", Component.getBuilder().build()));
public static Item EMERALD_BLOCK = register(new Item("emerald_block", Component.getBuilder().build()));
public static Item EMERALD_ORE = register(new Item("emerald_ore", Component.getBuilder().build()));
public static Item ENCHANTED_BOOK = register(new Item("enchanted_book", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).setEnchantmentGlintOverride(true).build()));
public static Item ENCHANTED_GOLDEN_APPLE = register(new Item("enchanted_golden_apple", Component.getBuilder().setRarity(Rarity.EPIC).setEnchantmentGlintOverride(true).build()));
public static Item ENCHANTING_TABLE = register(new Item("enchanting_table", Component.getBuilder().build()));
public static Item END_CRYSTAL = register(new Item("end_crystal", Component.getBuilder().setRarity(Rarity.RARE).setEnchantmentGlintOverride(true).build()));
public static Item END_PORTAL_FRAME = register(new Item("end_portal_frame", Component.getBuilder().build()));
public static Item END_ROD = register(new Item("end_rod", Component.getBuilder().build()));
public static Item END_STONE = register(new Item("end_stone", Component.getBuilder().build()));
public static Item END_STONE_BRICK_SLAB = register(new Item("end_stone_brick_slab", Component.getBuilder().build()));
public static Item END_STONE_BRICK_STAIRS = register(new Item("end_stone_brick_stairs", Component.getBuilder().build()));
public static Item END_STONE_BRICK_WALL = register(new Item("end_stone_brick_wall", Component.getBuilder().build()));
public static Item END_STONE_BRICKS = register(new Item("end_stone_bricks", Component.getBuilder().build()));
public static Item ENDER_CHEST = register(new Item("ender_chest", Component.getBuilder().build()));
public static Item ENDER_DRAGON_SPAWN_EGG = register(new Item("ender_dragon_spawn_egg", Component.getBuilder().build()));
public static Item ENDER_EYE = register(new Item("ender_eye", Component.getBuilder().build()));
public static Item ENDER_PEARL = register(new Item("ender_pearl", Component.getBuilder().setMaxStackSize(16).build()));
public static Item ENDERMAN_SPAWN_EGG = register(new Item("enderman_spawn_egg", Component.getBuilder().build()));
public static Item ENDERMITE_SPAWN_EGG = register(new Item("endermite_spawn_egg", Component.getBuilder().build()));
public static Item EVOKER_SPAWN_EGG = register(new Item("evoker_spawn_egg", Component.getBuilder().build()));
public static Item EXPERIENCE_BOTTLE = register(new Item("experience_bottle", Component.getBuilder().setRarity(Rarity.UNCOMMON).setEnchantmentGlintOverride(true).build()));
public static Item EXPLORER_POTTERY_SHERD = register(new Item("explorer_pottery_sherd", Component.getBuilder().build()));
public static Item EXPOSED_CHISELED_COPPER = register(new Item("exposed_chiseled_copper", Component.getBuilder().build()));
public static Item EXPOSED_COPPER = register(new Item("exposed_copper", Component.getBuilder().build()));
public static Item EXPOSED_COPPER_BULB = register(new Item("exposed_copper_bulb", Component.getBuilder().build()));
public static Item EXPOSED_COPPER_DOOR = register(new Item("exposed_copper_door", Component.getBuilder().build()));
public static Item EXPOSED_COPPER_GRATE = register(new Item("exposed_copper_grate", Component.getBuilder().build()));
public static Item EXPOSED_COPPER_TRAPDOOR = register(new Item("exposed_copper_trapdoor", Component.getBuilder().build()));
public static Item EXPOSED_CUT_COPPER = register(new Item("exposed_cut_copper", Component.getBuilder().build()));
public static Item EXPOSED_CUT_COPPER_SLAB = register(new Item("exposed_cut_copper_slab", Component.getBuilder().build()));
public static Item EXPOSED_CUT_COPPER_STAIRS = register(new Item("exposed_cut_copper_stairs", Component.getBuilder().build()));
public static Item EYE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("eye_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item FARMLAND = register(new Item("farmland", Component.getBuilder().build()));
public static Item FEATHER = register(new Item("feather", Component.getBuilder().build()));
public static Item FERMENTED_SPIDER_EYE = register(new Item("fermented_spider_eye", Component.getBuilder().build()));
public static Item FERN = register(new Item("fern", Component.getBuilder().build()));
public static Item FILLED_MAP = register(new Item("filled_map", Component.getBuilder().setMapColor(4603950).build()));
public static Item FIRE_CHARGE = register(new Item("fire_charge", Component.getBuilder().build()));
public static Item FIRE_CORAL = register(new Item("fire_coral", Component.getBuilder().build()));
public static Item FIRE_CORAL_BLOCK = register(new Item("fire_coral_block", Component.getBuilder().build()));
public static Item FIRE_CORAL_FAN = register(new Item("fire_coral_fan", Component.getBuilder().build()));
public static Item FIREWORK_ROCKET = register(new Item("firework_rocket", Component.getBuilder().build()));
public static Item FIREWORK_STAR = register(new Item("firework_star", Component.getBuilder().build()));
public static Item FISHING_ROD = register(new Item("fishing_rod", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
public static Item FLETCHING_TABLE = register(new Item("fletching_table", Component.getBuilder().build()));
public static Item FLINT = register(new Item("flint", Component.getBuilder().build()));
public static Item FLINT_AND_STEEL = register(new Item("flint_and_steel", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
public static Item FLOW_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("flow_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item FLOW_BANNER_PATTERN = register(new Item("flow_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item FLOW_POTTERY_SHERD = register(new Item("flow_pottery_sherd", Component.getBuilder().build()));
public static Item FLOWER_BANNER_PATTERN = register(new Item("flower_banner_pattern", Component.getBuilder().setMaxStackSize(1).build()));
public static Item FLOWER_POT = register(new Item("flower_pot", Component.getBuilder().build()));
public static Item FLOWERING_AZALEA = register(new Item("flowering_azalea", Component.getBuilder().build()));
public static Item FLOWERING_AZALEA_LEAVES = register(new Item("flowering_azalea_leaves", Component.getBuilder().build()));
public static Item FOX_SPAWN_EGG = register(new Item("fox_spawn_egg", Component.getBuilder().build()));
public static Item FRIEND_POTTERY_SHERD = register(new Item("friend_pottery_sherd", Component.getBuilder().build()));
public static Item FROG_SPAWN_EGG = register(new Item("frog_spawn_egg", Component.getBuilder().build()));
public static Item FROGSPAWN = register(new Item("frogspawn", Component.getBuilder().build()));
public static Item FURNACE = register(new Item("furnace", Component.getBuilder().build()));
public static Item FURNACE_MINECART = register(new Item("furnace_minecart", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GHAST_SPAWN_EGG = register(new Item("ghast_spawn_egg", Component.getBuilder().build()));
public static Item GHAST_TEAR = register(new Item("ghast_tear", Component.getBuilder().build()));
public static Item GILDED_BLACKSTONE = register(new Item("gilded_blackstone", Component.getBuilder().build()));
public static Item GLASS = register(new Item("glass", Component.getBuilder().build()));
public static Item GLASS_BOTTLE = register(new Item("glass_bottle", Component.getBuilder().build()));
public static Item GLASS_PANE = register(new Item("glass_pane", Component.getBuilder().build()));
public static Item GLISTERING_MELON_SLICE = register(new Item("glistering_melon_slice", Component.getBuilder().build()));
public static Item GLOBE_BANNER_PATTERN = register(new Item("globe_banner_pattern", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GLOW_BERRIES = register(new Item("glow_berries", Component.getBuilder().build()));
public static Item GLOW_INK_SAC = register(new Item("glow_ink_sac", Component.getBuilder().build()));
public static Item GLOW_ITEM_FRAME = register(new Item("glow_item_frame", Component.getBuilder().build()));
public static Item GLOW_LICHEN = register(new Item("glow_lichen", Component.getBuilder().build()));
public static Item GLOW_SQUID_SPAWN_EGG = register(new Item("glow_squid_spawn_egg", Component.getBuilder().build()));
public static Item GLOWSTONE = register(new Item("glowstone", Component.getBuilder().build()));
public static Item GLOWSTONE_DUST = register(new Item("glowstone_dust", Component.getBuilder().build()));
public static Item GOAT_HORN = register(new Item("goat_horn", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GOAT_SPAWN_EGG = register(new Item("goat_spawn_egg", Component.getBuilder().build()));
public static Item GOLD_BLOCK = register(new Item("gold_block", Component.getBuilder().build()));
public static Item GOLD_INGOT = register(new Item("gold_ingot", Component.getBuilder().build()));
public static Item GOLD_NUGGET = register(new Item("gold_nugget", Component.getBuilder().build()));
public static Item GOLD_ORE = register(new Item("gold_ore", Component.getBuilder().build()));
public static Item GOLDEN_APPLE = register(new Item("golden_apple", Component.getBuilder().setRarity(Rarity.RARE).build()));
public static Item GOLDEN_AXE = register(new Item("golden_axe", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 12.0d)).setDamagePerBlock(2)).build()));
public static Item GOLDEN_BOOTS = register(new Item("golden_boots", Component.getBuilder().setMaxDamage(91).setMaxStackSize(1).build()));
public static Item GOLDEN_CARROT = register(new Item("golden_carrot", Component.getBuilder().build()));
public static Item GOLDEN_CHESTPLATE = register(new Item("golden_chestplate", Component.getBuilder().setMaxDamage(112).setMaxStackSize(1).build()));
public static Item GOLDEN_HELMET = register(new Item("golden_helmet", Component.getBuilder().setMaxDamage(77).setMaxStackSize(1).build()));
public static Item GOLDEN_HOE = register(new Item("golden_hoe", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 12.0d)).setDamagePerBlock(2)).build()));
public static Item GOLDEN_HORSE_ARMOR = register(new Item("golden_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GOLDEN_LEGGINGS = register(new Item("golden_leggings", Component.getBuilder().setMaxDamage(105).setMaxStackSize(1).build()));
public static Item GOLDEN_PICKAXE = register(new Item("golden_pickaxe", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 12.0d)).setDamagePerBlock(2)).build()));
public static Item GOLDEN_SHOVEL = register(new Item("golden_shovel", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 12.0d)).setDamagePerBlock(2)).build()));
public static Item GOLDEN_SWORD = register(new Item("golden_sword", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
public static Item GRANITE = register(new Item("granite", Component.getBuilder().build()));
public static Item GRANITE_SLAB = register(new Item("granite_slab", Component.getBuilder().build()));
public static Item GRANITE_STAIRS = register(new Item("granite_stairs", Component.getBuilder().build()));
public static Item GRANITE_WALL = register(new Item("granite_wall", Component.getBuilder().build()));
public static Item GRASS_BLOCK = register(new Item("grass_block", Component.getBuilder().build()));
public static Item GRAVEL = register(new Item("gravel", Component.getBuilder().build()));
public static Item GRAY_BANNER = register(new Item("gray_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item GRAY_BED = register(new Item("gray_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GRAY_CANDLE = register(new Item("gray_candle", Component.getBuilder().build()));
public static Item GRAY_CARPET = register(new Item("gray_carpet", Component.getBuilder().build()));
public static Item GRAY_CONCRETE = register(new Item("gray_concrete", Component.getBuilder().build()));
public static Item GRAY_CONCRETE_POWDER = register(new Item("gray_concrete_powder", Component.getBuilder().build()));
public static Item GRAY_DYE = register(new Item("gray_dye", Component.getBuilder().build()));
public static Item GRAY_GLAZED_TERRACOTTA = register(new Item("gray_glazed_terracotta", Component.getBuilder().build()));
public static Item GRAY_SHULKER_BOX = register(new Item("gray_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GRAY_STAINED_GLASS = register(new Item("gray_stained_glass", Component.getBuilder().build()));
public static Item GRAY_STAINED_GLASS_PANE = register(new Item("gray_stained_glass_pane", Component.getBuilder().build()));
public static Item GRAY_TERRACOTTA = register(new Item("gray_terracotta", Component.getBuilder().build()));
public static Item GRAY_WOOL = register(new Item("gray_wool", Component.getBuilder().build()));
public static Item GREEN_BANNER = register(new Item("green_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item GREEN_BED = register(new Item("green_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GREEN_CANDLE = register(new Item("green_candle", Component.getBuilder().build()));
public static Item GREEN_CARPET = register(new Item("green_carpet", Component.getBuilder().build()));
public static Item GREEN_CONCRETE = register(new Item("green_concrete", Component.getBuilder().build()));
public static Item GREEN_CONCRETE_POWDER = register(new Item("green_concrete_powder", Component.getBuilder().build()));
public static Item GREEN_DYE = register(new Item("green_dye", Component.getBuilder().build()));
public static Item GREEN_GLAZED_TERRACOTTA = register(new Item("green_glazed_terracotta", Component.getBuilder().build()));
public static Item GREEN_SHULKER_BOX = register(new Item("green_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item GREEN_STAINED_GLASS = register(new Item("green_stained_glass", Component.getBuilder().build()));
public static Item GREEN_STAINED_GLASS_PANE = register(new Item("green_stained_glass_pane", Component.getBuilder().build()));
public static Item GREEN_TERRACOTTA = register(new Item("green_terracotta", Component.getBuilder().build()));
public static Item GREEN_WOOL = register(new Item("green_wool", Component.getBuilder().build()));
public static Item GRINDSTONE = register(new Item("grindstone", Component.getBuilder().build()));
public static Item GUARDIAN_SPAWN_EGG = register(new Item("guardian_spawn_egg", Component.getBuilder().build()));
public static Item GUNPOWDER = register(new Item("gunpowder", Component.getBuilder().build()));
public static Item GUSTER_BANNER_PATTERN = register(new Item("guster_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item GUSTER_POTTERY_SHERD = register(new Item("guster_pottery_sherd", Component.getBuilder().build()));
public static Item HANGING_ROOTS = register(new Item("hanging_roots", Component.getBuilder().build()));
public static Item HAY_BLOCK = register(new Item("hay_block", Component.getBuilder().build()));
public static Item HEART_OF_THE_SEA = register(new Item("heart_of_the_sea", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item HEART_POTTERY_SHERD = register(new Item("heart_pottery_sherd", Component.getBuilder().build()));
public static Item HEARTBREAK_POTTERY_SHERD = register(new Item("heartbreak_pottery_sherd", Component.getBuilder().build()));
public static Item HEAVY_CORE = register(new Item("heavy_core", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item HEAVY_WEIGHTED_PRESSURE_PLATE = register(new Item("heavy_weighted_pressure_plate", Component.getBuilder().build()));
public static Item HOGLIN_SPAWN_EGG = register(new Item("hoglin_spawn_egg", Component.getBuilder().build()));
public static Item HONEY_BLOCK = register(new Item("honey_block", Component.getBuilder().build()));
public static Item HONEY_BOTTLE = register(new Item("honey_bottle", Component.getBuilder().setMaxStackSize(16).build()));
public static Item HONEYCOMB = register(new Item("honeycomb", Component.getBuilder().build()));
public static Item HONEYCOMB_BLOCK = register(new Item("honeycomb_block", Component.getBuilder().build()));
public static Item HOPPER = register(new Item("hopper", Component.getBuilder().build()));
public static Item HOPPER_MINECART = register(new Item("hopper_minecart", Component.getBuilder().setMaxStackSize(1).build()));
public static Item HORN_CORAL = register(new Item("horn_coral", Component.getBuilder().build()));
public static Item HORN_CORAL_BLOCK = register(new Item("horn_coral_block", Component.getBuilder().build()));
public static Item HORN_CORAL_FAN = register(new Item("horn_coral_fan", Component.getBuilder().build()));
public static Item HORSE_SPAWN_EGG = register(new Item("horse_spawn_egg", Component.getBuilder().build()));
public static Item HOST_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("host_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item HOWL_POTTERY_SHERD = register(new Item("howl_pottery_sherd", Component.getBuilder().build()));
public static Item HUSK_SPAWN_EGG = register(new Item("husk_spawn_egg", Component.getBuilder().build()));
public static Item ICE = register(new Item("ice", Component.getBuilder().build()));
public static Item INFESTED_CHISELED_STONE_BRICKS = register(new Item("infested_chiseled_stone_bricks", Component.getBuilder().build()));
public static Item INFESTED_COBBLESTONE = register(new Item("infested_cobblestone", Component.getBuilder().build()));
public static Item INFESTED_CRACKED_STONE_BRICKS = register(new Item("infested_cracked_stone_bricks", Component.getBuilder().build()));
public static Item INFESTED_DEEPSLATE = register(new Item("infested_deepslate", Component.getBuilder().build()));
public static Item INFESTED_MOSSY_STONE_BRICKS = register(new Item("infested_mossy_stone_bricks", Component.getBuilder().build()));
public static Item INFESTED_STONE = register(new Item("infested_stone", Component.getBuilder().build()));
public static Item INFESTED_STONE_BRICKS = register(new Item("infested_stone_bricks", Component.getBuilder().build()));
public static Item INK_SAC = register(new Item("ink_sac", Component.getBuilder().build()));
public static Item IRON_AXE = register(new Item("iron_axe", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 6.0d)).setDamagePerBlock(2)).build()));
public static Item IRON_BARS = register(new Item("iron_bars", Component.getBuilder().build()));
public static Item IRON_BLOCK = register(new Item("iron_block", Component.getBuilder().build()));
public static Item IRON_BOOTS = register(new Item("iron_boots", Component.getBuilder().setMaxDamage(195).setMaxStackSize(1).build()));
public static Item IRON_CHESTPLATE = register(new Item("iron_chestplate", Component.getBuilder().setMaxDamage(240).setMaxStackSize(1).build()));
public static Item IRON_DOOR = register(new Item("iron_door", Component.getBuilder().build()));
public static Item IRON_GOLEM_SPAWN_EGG = register(new Item("iron_golem_spawn_egg", Component.getBuilder().build()));
public static Item IRON_HELMET = register(new Item("iron_helmet", Component.getBuilder().setMaxDamage(165).setMaxStackSize(1).build()));
public static Item IRON_HOE = register(new Item("iron_hoe", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 6.0d)).setDamagePerBlock(2)).build()));
public static Item IRON_HORSE_ARMOR = register(new Item("iron_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
public static Item IRON_INGOT = register(new Item("iron_ingot", Component.getBuilder().build()));
public static Item IRON_LEGGINGS = register(new Item("iron_leggings", Component.getBuilder().setMaxDamage(225).setMaxStackSize(1).build()));
public static Item IRON_NUGGET = register(new Item("iron_nugget", Component.getBuilder().build()));
public static Item IRON_ORE = register(new Item("iron_ore", Component.getBuilder().build()));
public static Item IRON_PICKAXE = register(new Item("iron_pickaxe", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 6.0d)).setDamagePerBlock(2)).build()));
public static Item IRON_SHOVEL = register(new Item("iron_shovel", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 6.0d)).setDamagePerBlock(2)).build()));
public static Item IRON_SWORD = register(new Item("iron_sword", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
public static Item IRON_TRAPDOOR = register(new Item("iron_trapdoor", Component.getBuilder().build()));
public static Item ITEM_FRAME = register(new Item("item_frame", Component.getBuilder().build()));
public static Item JACK_O_LANTERN = register(new Item("jack_o_lantern", Component.getBuilder().build()));
public static Item JIGSAW = register(new Item("jigsaw", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item JUKEBOX = register(new Item("jukebox", Component.getBuilder().build()));
public static Item JUNGLE_BOAT = register(new Item("jungle_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item JUNGLE_BUTTON = register(new Item("jungle_button", Component.getBuilder().build()));
public static Item JUNGLE_CHEST_BOAT = register(new Item("jungle_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item JUNGLE_DOOR = register(new Item("jungle_door", Component.getBuilder().build()));
public static Item JUNGLE_FENCE = register(new Item("jungle_fence", Component.getBuilder().build()));
public static Item JUNGLE_FENCE_GATE = register(new Item("jungle_fence_gate", Component.getBuilder().build()));
public static Item JUNGLE_HANGING_SIGN = register(new Item("jungle_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item JUNGLE_LEAVES = register(new Item("jungle_leaves", Component.getBuilder().build()));
public static Item JUNGLE_LOG = register(new Item("jungle_log", Component.getBuilder().build()));
public static Item JUNGLE_PLANKS = register(new Item("jungle_planks", Component.getBuilder().build()));
public static Item JUNGLE_PRESSURE_PLATE = register(new Item("jungle_pressure_plate", Component.getBuilder().build()));
public static Item JUNGLE_SAPLING = register(new Item("jungle_sapling", Component.getBuilder().build()));
public static Item JUNGLE_SIGN = register(new Item("jungle_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item JUNGLE_SLAB = register(new Item("jungle_slab", Component.getBuilder().build()));
public static Item JUNGLE_STAIRS = register(new Item("jungle_stairs", Component.getBuilder().build()));
public static Item JUNGLE_TRAPDOOR = register(new Item("jungle_trapdoor", Component.getBuilder().build()));
public static Item JUNGLE_WOOD = register(new Item("jungle_wood", Component.getBuilder().build()));
public static Item KELP = register(new Item("kelp", Component.getBuilder().build()));
public static Item KNOWLEDGE_BOOK = register(new Item("knowledge_book", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
public static Item LADDER = register(new Item("ladder", Component.getBuilder().build()));
public static Item LANTERN = register(new Item("lantern", Component.getBuilder().build()));
public static Item LAPIS_BLOCK = register(new Item("lapis_block", Component.getBuilder().build()));
public static Item LAPIS_LAZULI = register(new Item("lapis_lazuli", Component.getBuilder().build()));
public static Item LAPIS_ORE = register(new Item("lapis_ore", Component.getBuilder().build()));
public static Item LARGE_AMETHYST_BUD = register(new Item("large_amethyst_bud", Component.getBuilder().build()));
public static Item LARGE_FERN = register(new Item("large_fern", Component.getBuilder().build()));
public static Item LAVA_BUCKET = register(new Item("lava_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LEAD = register(new Item("lead", Component.getBuilder().build()));
public static Item LEATHER = register(new Item("leather", Component.getBuilder().build()));
public static Item LEATHER_BOOTS = register(new Item("leather_boots", Component.getBuilder().setMaxDamage(65).setMaxStackSize(1).build()));
public static Item LEATHER_CHESTPLATE = register(new Item("leather_chestplate", Component.getBuilder().setMaxDamage(80).setMaxStackSize(1).build()));
public static Item LEATHER_HELMET = register(new Item("leather_helmet", Component.getBuilder().setMaxDamage(55).setMaxStackSize(1).build()));
public static Item LEATHER_HORSE_ARMOR = register(new Item("leather_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LEATHER_LEGGINGS = register(new Item("leather_leggings", Component.getBuilder().setMaxDamage(75).setMaxStackSize(1).build()));
public static Item LECTERN = register(new Item("lectern", Component.getBuilder().build()));
public static Item LEVER = register(new Item("lever", Component.getBuilder().build()));
public static Item LIGHT = register(new Item("light", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item LIGHT_BLUE_BANNER = register(new Item("light_blue_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item LIGHT_BLUE_BED = register(new Item("light_blue_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LIGHT_BLUE_CANDLE = register(new Item("light_blue_candle", Component.getBuilder().build()));
public static Item LIGHT_BLUE_CARPET = register(new Item("light_blue_carpet", Component.getBuilder().build()));
public static Item LIGHT_BLUE_CONCRETE = register(new Item("light_blue_concrete", Component.getBuilder().build()));
public static Item LIGHT_BLUE_CONCRETE_POWDER = register(new Item("light_blue_concrete_powder", Component.getBuilder().build()));
public static Item LIGHT_BLUE_DYE = register(new Item("light_blue_dye", Component.getBuilder().build()));
public static Item LIGHT_BLUE_GLAZED_TERRACOTTA = register(new Item("light_blue_glazed_terracotta", Component.getBuilder().build()));
public static Item LIGHT_BLUE_SHULKER_BOX = register(new Item("light_blue_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LIGHT_BLUE_STAINED_GLASS = register(new Item("light_blue_stained_glass", Component.getBuilder().build()));
public static Item LIGHT_BLUE_STAINED_GLASS_PANE = register(new Item("light_blue_stained_glass_pane", Component.getBuilder().build()));
public static Item LIGHT_BLUE_TERRACOTTA = register(new Item("light_blue_terracotta", Component.getBuilder().build()));
public static Item LIGHT_BLUE_WOOL = register(new Item("light_blue_wool", Component.getBuilder().build()));
public static Item LIGHT_GRAY_BANNER = register(new Item("light_gray_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item LIGHT_GRAY_BED = register(new Item("light_gray_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LIGHT_GRAY_CANDLE = register(new Item("light_gray_candle", Component.getBuilder().build()));
public static Item LIGHT_GRAY_CARPET = register(new Item("light_gray_carpet", Component.getBuilder().build()));
public static Item LIGHT_GRAY_CONCRETE = register(new Item("light_gray_concrete", Component.getBuilder().build()));
public static Item LIGHT_GRAY_CONCRETE_POWDER = register(new Item("light_gray_concrete_powder", Component.getBuilder().build()));
public static Item LIGHT_GRAY_DYE = register(new Item("light_gray_dye", Component.getBuilder().build()));
public static Item LIGHT_GRAY_GLAZED_TERRACOTTA = register(new Item("light_gray_glazed_terracotta", Component.getBuilder().build()));
public static Item LIGHT_GRAY_SHULKER_BOX = register(new Item("light_gray_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LIGHT_GRAY_STAINED_GLASS = register(new Item("light_gray_stained_glass", Component.getBuilder().build()));
public static Item LIGHT_GRAY_STAINED_GLASS_PANE = register(new Item("light_gray_stained_glass_pane", Component.getBuilder().build()));
public static Item LIGHT_GRAY_TERRACOTTA = register(new Item("light_gray_terracotta", Component.getBuilder().build()));
public static Item LIGHT_GRAY_WOOL = register(new Item("light_gray_wool", Component.getBuilder().build()));
public static Item LIGHT_WEIGHTED_PRESSURE_PLATE = register(new Item("light_weighted_pressure_plate", Component.getBuilder().build()));
public static Item LIGHTNING_ROD = register(new Item("lightning_rod", Component.getBuilder().build()));
public static Item LILAC = register(new Item("lilac", Component.getBuilder().build()));
public static Item LILY_OF_THE_VALLEY = register(new Item("lily_of_the_valley", Component.getBuilder().build()));
public static Item LILY_PAD = register(new Item("lily_pad", Component.getBuilder().build()));
public static Item LIME_BANNER = register(new Item("lime_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item LIME_BED = register(new Item("lime_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LIME_CANDLE = register(new Item("lime_candle", Component.getBuilder().build()));
public static Item LIME_CARPET = register(new Item("lime_carpet", Component.getBuilder().build()));
public static Item LIME_CONCRETE = register(new Item("lime_concrete", Component.getBuilder().build()));
public static Item LIME_CONCRETE_POWDER = register(new Item("lime_concrete_powder", Component.getBuilder().build()));
public static Item LIME_DYE = register(new Item("lime_dye", Component.getBuilder().build()));
public static Item LIME_GLAZED_TERRACOTTA = register(new Item("lime_glazed_terracotta", Component.getBuilder().build()));
public static Item LIME_SHULKER_BOX = register(new Item("lime_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LIME_STAINED_GLASS = register(new Item("lime_stained_glass", Component.getBuilder().build()));
public static Item LIME_STAINED_GLASS_PANE = register(new Item("lime_stained_glass_pane", Component.getBuilder().build()));
public static Item LIME_TERRACOTTA = register(new Item("lime_terracotta", Component.getBuilder().build()));
public static Item LIME_WOOL = register(new Item("lime_wool", Component.getBuilder().build()));
public static Item LINGERING_POTION = register(new Item("lingering_potion", Component.getBuilder().setMaxStackSize(1).build()));
public static Item LLAMA_SPAWN_EGG = register(new Item("llama_spawn_egg", Component.getBuilder().build()));
public static Item LODESTONE = register(new Item("lodestone", Component.getBuilder().build()));
public static Item LOOM = register(new Item("loom", Component.getBuilder().build()));
public static Item MACE = register(new Item("mace", Component.getBuilder().setMaxDamage(500).setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
public static Item MAGENTA_BANNER = register(new Item("magenta_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item MAGENTA_BED = register(new Item("magenta_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MAGENTA_CANDLE = register(new Item("magenta_candle", Component.getBuilder().build()));
public static Item MAGENTA_CARPET = register(new Item("magenta_carpet", Component.getBuilder().build()));
public static Item MAGENTA_CONCRETE = register(new Item("magenta_concrete", Component.getBuilder().build()));
public static Item MAGENTA_CONCRETE_POWDER = register(new Item("magenta_concrete_powder", Component.getBuilder().build()));
public static Item MAGENTA_DYE = register(new Item("magenta_dye", Component.getBuilder().build()));
public static Item MAGENTA_GLAZED_TERRACOTTA = register(new Item("magenta_glazed_terracotta", Component.getBuilder().build()));
public static Item MAGENTA_SHULKER_BOX = register(new Item("magenta_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MAGENTA_STAINED_GLASS = register(new Item("magenta_stained_glass", Component.getBuilder().build()));
public static Item MAGENTA_STAINED_GLASS_PANE = register(new Item("magenta_stained_glass_pane", Component.getBuilder().build()));
public static Item MAGENTA_TERRACOTTA = register(new Item("magenta_terracotta", Component.getBuilder().build()));
public static Item MAGENTA_WOOL = register(new Item("magenta_wool", Component.getBuilder().build()));
public static Item MAGMA_BLOCK = register(new Item("magma_block", Component.getBuilder().build()));
public static Item MAGMA_CREAM = register(new Item("magma_cream", Component.getBuilder().build()));
public static Item MAGMA_CUBE_SPAWN_EGG = register(new Item("magma_cube_spawn_egg", Component.getBuilder().build()));
public static Item MANGROVE_BOAT = register(new Item("mangrove_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MANGROVE_BUTTON = register(new Item("mangrove_button", Component.getBuilder().build()));
public static Item MANGROVE_CHEST_BOAT = register(new Item("mangrove_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MANGROVE_DOOR = register(new Item("mangrove_door", Component.getBuilder().build()));
public static Item MANGROVE_FENCE = register(new Item("mangrove_fence", Component.getBuilder().build()));
public static Item MANGROVE_FENCE_GATE = register(new Item("mangrove_fence_gate", Component.getBuilder().build()));
public static Item MANGROVE_HANGING_SIGN = register(new Item("mangrove_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item MANGROVE_LEAVES = register(new Item("mangrove_leaves", Component.getBuilder().build()));
public static Item MANGROVE_LOG = register(new Item("mangrove_log", Component.getBuilder().build()));
public static Item MANGROVE_PLANKS = register(new Item("mangrove_planks", Component.getBuilder().build()));
public static Item MANGROVE_PRESSURE_PLATE = register(new Item("mangrove_pressure_plate", Component.getBuilder().build()));
public static Item MANGROVE_PROPAGULE = register(new Item("mangrove_propagule", Component.getBuilder().build()));
public static Item MANGROVE_ROOTS = register(new Item("mangrove_roots", Component.getBuilder().build()));
public static Item MANGROVE_SIGN = register(new Item("mangrove_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item MANGROVE_SLAB = register(new Item("mangrove_slab", Component.getBuilder().build()));
public static Item MANGROVE_STAIRS = register(new Item("mangrove_stairs", Component.getBuilder().build()));
public static Item MANGROVE_TRAPDOOR = register(new Item("mangrove_trapdoor", Component.getBuilder().build()));
public static Item MANGROVE_WOOD = register(new Item("mangrove_wood", Component.getBuilder().build()));
public static Item MAP = register(new Item("map", Component.getBuilder().build()));
public static Item MEDIUM_AMETHYST_BUD = register(new Item("medium_amethyst_bud", Component.getBuilder().build()));
public static Item MELON = register(new Item("melon", Component.getBuilder().build()));
public static Item MELON_SEEDS = register(new Item("melon_seeds", Component.getBuilder().build()));
public static Item MELON_SLICE = register(new Item("melon_slice", Component.getBuilder().build()));
public static Item MILK_BUCKET = register(new Item("milk_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MINECART = register(new Item("minecart", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MINER_POTTERY_SHERD = register(new Item("miner_pottery_sherd", Component.getBuilder().build()));
public static Item MOJANG_BANNER_PATTERN = register(new Item("mojang_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
public static Item MOOSHROOM_SPAWN_EGG = register(new Item("mooshroom_spawn_egg", Component.getBuilder().build()));
public static Item MOSS_BLOCK = register(new Item("moss_block", Component.getBuilder().build()));
public static Item MOSS_CARPET = register(new Item("moss_carpet", Component.getBuilder().build()));
public static Item MOSSY_COBBLESTONE = register(new Item("mossy_cobblestone", Component.getBuilder().build()));
public static Item MOSSY_COBBLESTONE_SLAB = register(new Item("mossy_cobblestone_slab", Component.getBuilder().build()));
public static Item MOSSY_COBBLESTONE_STAIRS = register(new Item("mossy_cobblestone_stairs", Component.getBuilder().build()));
public static Item MOSSY_COBBLESTONE_WALL = register(new Item("mossy_cobblestone_wall", Component.getBuilder().build()));
public static Item MOSSY_STONE_BRICK_SLAB = register(new Item("mossy_stone_brick_slab", Component.getBuilder().build()));
public static Item MOSSY_STONE_BRICK_STAIRS = register(new Item("mossy_stone_brick_stairs", Component.getBuilder().build()));
public static Item MOSSY_STONE_BRICK_WALL = register(new Item("mossy_stone_brick_wall", Component.getBuilder().build()));
public static Item MOSSY_STONE_BRICKS = register(new Item("mossy_stone_bricks", Component.getBuilder().build()));
public static Item MOURNER_POTTERY_SHERD = register(new Item("mourner_pottery_sherd", Component.getBuilder().build()));
public static Item MUD = register(new Item("mud", Component.getBuilder().build()));
public static Item MUD_BRICK_SLAB = register(new Item("mud_brick_slab", Component.getBuilder().build()));
public static Item MUD_BRICK_STAIRS = register(new Item("mud_brick_stairs", Component.getBuilder().build()));
public static Item MUD_BRICK_WALL = register(new Item("mud_brick_wall", Component.getBuilder().build()));
public static Item MUD_BRICKS = register(new Item("mud_bricks", Component.getBuilder().build()));
public static Item MUDDY_MANGROVE_ROOTS = register(new Item("muddy_mangrove_roots", Component.getBuilder().build()));
public static Item MULE_SPAWN_EGG = register(new Item("mule_spawn_egg", Component.getBuilder().build()));
public static Item MUSHROOM_STEM = register(new Item("mushroom_stem", Component.getBuilder().build()));
public static Item MUSHROOM_STEW = register(new Item("mushroom_stew", Component.getBuilder().setMaxStackSize(1).build()));
public static Item MUSIC_DISC_11 = register(new Item("music_disc_11", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_13 = register(new Item("music_disc_13", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_5 = register(new Item("music_disc_5", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_BLOCKS = register(new Item("music_disc_blocks", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_CAT = register(new Item("music_disc_cat", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_CHIRP = register(new Item("music_disc_chirp", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_CREATOR = register(new Item("music_disc_creator", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_CREATOR_MUSIC_BOX = register(new Item("music_disc_creator_music_box", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_FAR = register(new Item("music_disc_far", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_MALL = register(new Item("music_disc_mall", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_MELLOHI = register(new Item("music_disc_mellohi", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_OTHERSIDE = register(new Item("music_disc_otherside", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_PIGSTEP = register(new Item("music_disc_pigstep", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_PRECIPICE = register(new Item("music_disc_precipice", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_RELIC = register(new Item("music_disc_relic", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_STAL = register(new Item("music_disc_stal", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_STRAD = register(new Item("music_disc_strad", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_WAIT = register(new Item("music_disc_wait", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUSIC_DISC_WARD = register(new Item("music_disc_ward", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
public static Item MUTTON = register(new Item("mutton", Component.getBuilder().build()));
public static Item MYCELIUM = register(new Item("mycelium", Component.getBuilder().build()));
public static Item NAME_TAG = register(new Item("name_tag", Component.getBuilder().build()));
public static Item NAUTILUS_SHELL = register(new Item("nautilus_shell", Component.getBuilder().build()));
public static Item NETHER_BRICK = register(new Item("nether_brick", Component.getBuilder().build()));
public static Item NETHER_BRICK_FENCE = register(new Item("nether_brick_fence", Component.getBuilder().build()));
public static Item NETHER_BRICK_SLAB = register(new Item("nether_brick_slab", Component.getBuilder().build()));
public static Item NETHER_BRICK_STAIRS = register(new Item("nether_brick_stairs", Component.getBuilder().build()));
public static Item NETHER_BRICK_WALL = register(new Item("nether_brick_wall", Component.getBuilder().build()));
public static Item NETHER_BRICKS = register(new Item("nether_bricks", Component.getBuilder().build()));
public static Item NETHER_GOLD_ORE = register(new Item("nether_gold_ore", Component.getBuilder().build()));
public static Item NETHER_QUARTZ_ORE = register(new Item("nether_quartz_ore", Component.getBuilder().build()));
public static Item NETHER_SPROUTS = register(new Item("nether_sprouts", Component.getBuilder().build()));
public static Item NETHER_STAR = register(new Item("nether_star", Component.getBuilder().setRarity(Rarity.UNCOMMON).setEnchantmentGlintOverride(true).build()));
public static Item NETHER_WART = register(new Item("nether_wart", Component.getBuilder().build()));
public static Item NETHER_WART_BLOCK = register(new Item("nether_wart_block", Component.getBuilder().build()));
public static Item NETHERITE_AXE = register(new Item("netherite_axe", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 9.0d)).setDamagePerBlock(2)).build()));
public static Item NETHERITE_BLOCK = register(new Item("netherite_block", Component.getBuilder().build()));
public static Item NETHERITE_BOOTS = register(new Item("netherite_boots", Component.getBuilder().setMaxDamage(481).setMaxStackSize(1).build()));
public static Item NETHERITE_CHESTPLATE = register(new Item("netherite_chestplate", Component.getBuilder().setMaxDamage(592).setMaxStackSize(1).build()));
public static Item NETHERITE_HELMET = register(new Item("netherite_helmet", Component.getBuilder().setMaxDamage(407).setMaxStackSize(1).build()));
public static Item NETHERITE_HOE = register(new Item("netherite_hoe", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 9.0d)).setDamagePerBlock(2)).build()));
public static Item NETHERITE_INGOT = register(new Item("netherite_ingot", Component.getBuilder().build()));
public static Item NETHERITE_LEGGINGS = register(new Item("netherite_leggings", Component.getBuilder().setMaxDamage(555).setMaxStackSize(1).build()));
public static Item NETHERITE_PICKAXE = register(new Item("netherite_pickaxe", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 9.0d)).setDamagePerBlock(2)).build()));
public static Item NETHERITE_SCRAP = register(new Item("netherite_scrap", Component.getBuilder().build()));
public static Item NETHERITE_SHOVEL = register(new Item("netherite_shovel", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 9.0d)).setDamagePerBlock(2)).build()));
public static Item NETHERITE_SWORD = register(new Item("netherite_sword", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
public static Item NETHERITE_UPGRADE_SMITHING_TEMPLATE = register(new Item("netherite_upgrade_smithing_template", Component.getBuilder().build()));
public static Item NETHERRACK = register(new Item("netherrack", Component.getBuilder().build()));
public static Item NOTE_BLOCK = register(new Item("note_block", Component.getBuilder().build()));
public static Item OAK_BOAT = register(new Item("oak_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item OAK_BUTTON = register(new Item("oak_button", Component.getBuilder().build()));
public static Item OAK_CHEST_BOAT = register(new Item("oak_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item OAK_DOOR = register(new Item("oak_door", Component.getBuilder().build()));
public static Item OAK_FENCE = register(new Item("oak_fence", Component.getBuilder().build()));
public static Item OAK_FENCE_GATE = register(new Item("oak_fence_gate", Component.getBuilder().build()));
public static Item OAK_HANGING_SIGN = register(new Item("oak_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item OAK_LEAVES = register(new Item("oak_leaves", Component.getBuilder().build()));
public static Item OAK_LOG = register(new Item("oak_log", Component.getBuilder().build()));
public static Item OAK_PLANKS = register(new Item("oak_planks", Component.getBuilder().build()));
public static Item OAK_PRESSURE_PLATE = register(new Item("oak_pressure_plate", Component.getBuilder().build()));
public static Item OAK_SAPLING = register(new Item("oak_sapling", Component.getBuilder().build()));
public static Item OAK_SIGN = register(new Item("oak_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item OAK_SLAB = register(new Item("oak_slab", Component.getBuilder().build()));
public static Item OAK_STAIRS = register(new Item("oak_stairs", Component.getBuilder().build()));
public static Item OAK_TRAPDOOR = register(new Item("oak_trapdoor", Component.getBuilder().build()));
public static Item OAK_WOOD = register(new Item("oak_wood", Component.getBuilder().build()));
public static Item OBSERVER = register(new Item("observer", Component.getBuilder().build()));
public static Item OBSIDIAN = register(new Item("obsidian", Component.getBuilder().build()));
public static Item OCELOT_SPAWN_EGG = register(new Item("ocelot_spawn_egg", Component.getBuilder().build()));
public static Item OCHRE_FROGLIGHT = register(new Item("ochre_froglight", Component.getBuilder().build()));
public static Item OMINOUS_BOTTLE = register(new Item("ominous_bottle", Component.getBuilder().setOminousBottleAmplifier(0).build()));
public static Item OMINOUS_TRIAL_KEY = register(new Item("ominous_trial_key", Component.getBuilder().build()));
public static Item ORANGE_BANNER = register(new Item("orange_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item ORANGE_BED = register(new Item("orange_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item ORANGE_CANDLE = register(new Item("orange_candle", Component.getBuilder().build()));
public static Item ORANGE_CARPET = register(new Item("orange_carpet", Component.getBuilder().build()));
public static Item ORANGE_CONCRETE = register(new Item("orange_concrete", Component.getBuilder().build()));
public static Item ORANGE_CONCRETE_POWDER = register(new Item("orange_concrete_powder", Component.getBuilder().build()));
public static Item ORANGE_DYE = register(new Item("orange_dye", Component.getBuilder().build()));
public static Item ORANGE_GLAZED_TERRACOTTA = register(new Item("orange_glazed_terracotta", Component.getBuilder().build()));
public static Item ORANGE_SHULKER_BOX = register(new Item("orange_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item ORANGE_STAINED_GLASS = register(new Item("orange_stained_glass", Component.getBuilder().build()));
public static Item ORANGE_STAINED_GLASS_PANE = register(new Item("orange_stained_glass_pane", Component.getBuilder().build()));
public static Item ORANGE_TERRACOTTA = register(new Item("orange_terracotta", Component.getBuilder().build()));
public static Item ORANGE_TULIP = register(new Item("orange_tulip", Component.getBuilder().build()));
public static Item ORANGE_WOOL = register(new Item("orange_wool", Component.getBuilder().build()));
public static Item OXEYE_DAISY = register(new Item("oxeye_daisy", Component.getBuilder().build()));
public static Item OXIDIZED_CHISELED_COPPER = register(new Item("oxidized_chiseled_copper", Component.getBuilder().build()));
public static Item OXIDIZED_COPPER = register(new Item("oxidized_copper", Component.getBuilder().build()));
public static Item OXIDIZED_COPPER_BULB = register(new Item("oxidized_copper_bulb", Component.getBuilder().build()));
public static Item OXIDIZED_COPPER_DOOR = register(new Item("oxidized_copper_door", Component.getBuilder().build()));
public static Item OXIDIZED_COPPER_GRATE = register(new Item("oxidized_copper_grate", Component.getBuilder().build()));
public static Item OXIDIZED_COPPER_TRAPDOOR = register(new Item("oxidized_copper_trapdoor", Component.getBuilder().build()));
public static Item OXIDIZED_CUT_COPPER = register(new Item("oxidized_cut_copper", Component.getBuilder().build()));
public static Item OXIDIZED_CUT_COPPER_SLAB = register(new Item("oxidized_cut_copper_slab", Component.getBuilder().build()));
public static Item OXIDIZED_CUT_COPPER_STAIRS = register(new Item("oxidized_cut_copper_stairs", Component.getBuilder().build()));
public static Item PACKED_ICE = register(new Item("packed_ice", Component.getBuilder().build()));
public static Item PACKED_MUD = register(new Item("packed_mud", Component.getBuilder().build()));
public static Item PAINTING = register(new Item("painting", Component.getBuilder().build()));
public static Item PANDA_SPAWN_EGG = register(new Item("panda_spawn_egg", Component.getBuilder().build()));
public static Item PAPER = register(new Item("paper", Component.getBuilder().build()));
public static Item PARROT_SPAWN_EGG = register(new Item("parrot_spawn_egg", Component.getBuilder().build()));
public static Item PEARLESCENT_FROGLIGHT = register(new Item("pearlescent_froglight", Component.getBuilder().build()));
public static Item PEONY = register(new Item("peony", Component.getBuilder().build()));
public static Item PETRIFIED_OAK_SLAB = register(new Item("petrified_oak_slab", Component.getBuilder().build()));
public static Item PHANTOM_MEMBRANE = register(new Item("phantom_membrane", Component.getBuilder().build()));
public static Item PHANTOM_SPAWN_EGG = register(new Item("phantom_spawn_egg", Component.getBuilder().build()));
public static Item PIG_SPAWN_EGG = register(new Item("pig_spawn_egg", Component.getBuilder().build()));
public static Item PIGLIN_BANNER_PATTERN = register(new Item("piglin_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
public static Item PIGLIN_BRUTE_SPAWN_EGG = register(new Item("piglin_brute_spawn_egg", Component.getBuilder().build()));
public static Item PIGLIN_HEAD = register(new Item("piglin_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item PIGLIN_SPAWN_EGG = register(new Item("piglin_spawn_egg", Component.getBuilder().build()));
public static Item PILLAGER_SPAWN_EGG = register(new Item("pillager_spawn_egg", Component.getBuilder().build()));
public static Item PINK_BANNER = register(new Item("pink_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item PINK_BED = register(new Item("pink_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item PINK_CANDLE = register(new Item("pink_candle", Component.getBuilder().build()));
public static Item PINK_CARPET = register(new Item("pink_carpet", Component.getBuilder().build()));
public static Item PINK_CONCRETE = register(new Item("pink_concrete", Component.getBuilder().build()));
public static Item PINK_CONCRETE_POWDER = register(new Item("pink_concrete_powder", Component.getBuilder().build()));
public static Item PINK_DYE = register(new Item("pink_dye", Component.getBuilder().build()));
public static Item PINK_GLAZED_TERRACOTTA = register(new Item("pink_glazed_terracotta", Component.getBuilder().build()));
public static Item PINK_PETALS = register(new Item("pink_petals", Component.getBuilder().build()));
public static Item PINK_SHULKER_BOX = register(new Item("pink_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item PINK_STAINED_GLASS = register(new Item("pink_stained_glass", Component.getBuilder().build()));
public static Item PINK_STAINED_GLASS_PANE = register(new Item("pink_stained_glass_pane", Component.getBuilder().build()));
public static Item PINK_TERRACOTTA = register(new Item("pink_terracotta", Component.getBuilder().build()));
public static Item PINK_TULIP = register(new Item("pink_tulip", Component.getBuilder().build()));
public static Item PINK_WOOL = register(new Item("pink_wool", Component.getBuilder().build()));
public static Item PISTON = register(new Item("piston", Component.getBuilder().build()));
public static Item PITCHER_PLANT = register(new Item("pitcher_plant", Component.getBuilder().build()));
public static Item PITCHER_POD = register(new Item("pitcher_pod", Component.getBuilder().build()));
public static Item PLAYER_HEAD = register(new Item("player_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item PLENTY_POTTERY_SHERD = register(new Item("plenty_pottery_sherd", Component.getBuilder().build()));
public static Item PODZOL = register(new Item("podzol", Component.getBuilder().build()));
public static Item POINTED_DRIPSTONE = register(new Item("pointed_dripstone", Component.getBuilder().build()));
public static Item POISONOUS_POTATO = register(new Item("poisonous_potato", Component.getBuilder().build()));
public static Item POLAR_BEAR_SPAWN_EGG = register(new Item("polar_bear_spawn_egg", Component.getBuilder().build()));
public static Item POLISHED_ANDESITE = register(new Item("polished_andesite", Component.getBuilder().build()));
public static Item POLISHED_ANDESITE_SLAB = register(new Item("polished_andesite_slab", Component.getBuilder().build()));
public static Item POLISHED_ANDESITE_STAIRS = register(new Item("polished_andesite_stairs", Component.getBuilder().build()));
public static Item POLISHED_BASALT = register(new Item("polished_basalt", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE = register(new Item("polished_blackstone", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_BRICK_SLAB = register(new Item("polished_blackstone_brick_slab", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_BRICK_STAIRS = register(new Item("polished_blackstone_brick_stairs", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_BRICK_WALL = register(new Item("polished_blackstone_brick_wall", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_BRICKS = register(new Item("polished_blackstone_bricks", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_BUTTON = register(new Item("polished_blackstone_button", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_PRESSURE_PLATE = register(new Item("polished_blackstone_pressure_plate", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_SLAB = register(new Item("polished_blackstone_slab", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_STAIRS = register(new Item("polished_blackstone_stairs", Component.getBuilder().build()));
public static Item POLISHED_BLACKSTONE_WALL = register(new Item("polished_blackstone_wall", Component.getBuilder().build()));
public static Item POLISHED_DEEPSLATE = register(new Item("polished_deepslate", Component.getBuilder().build()));
public static Item POLISHED_DEEPSLATE_SLAB = register(new Item("polished_deepslate_slab", Component.getBuilder().build()));
public static Item POLISHED_DEEPSLATE_STAIRS = register(new Item("polished_deepslate_stairs", Component.getBuilder().build()));
public static Item POLISHED_DEEPSLATE_WALL = register(new Item("polished_deepslate_wall", Component.getBuilder().build()));
public static Item POLISHED_DIORITE = register(new Item("polished_diorite", Component.getBuilder().build()));
public static Item POLISHED_DIORITE_SLAB = register(new Item("polished_diorite_slab", Component.getBuilder().build()));
public static Item POLISHED_DIORITE_STAIRS = register(new Item("polished_diorite_stairs", Component.getBuilder().build()));
public static Item POLISHED_GRANITE = register(new Item("polished_granite", Component.getBuilder().build()));
public static Item POLISHED_GRANITE_SLAB = register(new Item("polished_granite_slab", Component.getBuilder().build()));
public static Item POLISHED_GRANITE_STAIRS = register(new Item("polished_granite_stairs", Component.getBuilder().build()));
public static Item POLISHED_TUFF = register(new Item("polished_tuff", Component.getBuilder().build()));
public static Item POLISHED_TUFF_SLAB = register(new Item("polished_tuff_slab", Component.getBuilder().build()));
public static Item POLISHED_TUFF_STAIRS = register(new Item("polished_tuff_stairs", Component.getBuilder().build()));
public static Item POLISHED_TUFF_WALL = register(new Item("polished_tuff_wall", Component.getBuilder().build()));
public static Item POPPED_CHORUS_FRUIT = register(new Item("popped_chorus_fruit", Component.getBuilder().build()));
public static Item POPPY = register(new Item("poppy", Component.getBuilder().build()));
public static Item PORKCHOP = register(new Item("porkchop", Component.getBuilder().build()));
public static Item POTATO = register(new Item("potato", Component.getBuilder().build()));
public static Item POTION = register(new Item("potion", Component.getBuilder().setMaxStackSize(1).build()));
public static Item POWDER_SNOW_BUCKET = register(new Item("powder_snow_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item POWERED_RAIL = register(new Item("powered_rail", Component.getBuilder().build()));
public static Item PRISMARINE = register(new Item("prismarine", Component.getBuilder().build()));
public static Item PRISMARINE_BRICK_SLAB = register(new Item("prismarine_brick_slab", Component.getBuilder().build()));
public static Item PRISMARINE_BRICK_STAIRS = register(new Item("prismarine_brick_stairs", Component.getBuilder().build()));
public static Item PRISMARINE_BRICKS = register(new Item("prismarine_bricks", Component.getBuilder().build()));
public static Item PRISMARINE_CRYSTALS = register(new Item("prismarine_crystals", Component.getBuilder().build()));
public static Item PRISMARINE_SHARD = register(new Item("prismarine_shard", Component.getBuilder().build()));
public static Item PRISMARINE_SLAB = register(new Item("prismarine_slab", Component.getBuilder().build()));
public static Item PRISMARINE_STAIRS = register(new Item("prismarine_stairs", Component.getBuilder().build()));
public static Item PRISMARINE_WALL = register(new Item("prismarine_wall", Component.getBuilder().build()));
public static Item PRIZE_POTTERY_SHERD = register(new Item("prize_pottery_sherd", Component.getBuilder().build()));
public static Item PUFFERFISH = register(new Item("pufferfish", Component.getBuilder().build()));
public static Item PUFFERFISH_BUCKET = register(new Item("pufferfish_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item PUFFERFISH_SPAWN_EGG = register(new Item("pufferfish_spawn_egg", Component.getBuilder().build()));
public static Item PUMPKIN = register(new Item("pumpkin", Component.getBuilder().build()));
public static Item PUMPKIN_PIE = register(new Item("pumpkin_pie", Component.getBuilder().build()));
public static Item PUMPKIN_SEEDS = register(new Item("pumpkin_seeds", Component.getBuilder().build()));
public static Item PURPLE_BANNER = register(new Item("purple_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item PURPLE_BED = register(new Item("purple_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item PURPLE_CANDLE = register(new Item("purple_candle", Component.getBuilder().build()));
public static Item PURPLE_CARPET = register(new Item("purple_carpet", Component.getBuilder().build()));
public static Item PURPLE_CONCRETE = register(new Item("purple_concrete", Component.getBuilder().build()));
public static Item PURPLE_CONCRETE_POWDER = register(new Item("purple_concrete_powder", Component.getBuilder().build()));
public static Item PURPLE_DYE = register(new Item("purple_dye", Component.getBuilder().build()));
public static Item PURPLE_GLAZED_TERRACOTTA = register(new Item("purple_glazed_terracotta", Component.getBuilder().build()));
public static Item PURPLE_SHULKER_BOX = register(new Item("purple_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item PURPLE_STAINED_GLASS = register(new Item("purple_stained_glass", Component.getBuilder().build()));
public static Item PURPLE_STAINED_GLASS_PANE = register(new Item("purple_stained_glass_pane", Component.getBuilder().build()));
public static Item PURPLE_TERRACOTTA = register(new Item("purple_terracotta", Component.getBuilder().build()));
public static Item PURPLE_WOOL = register(new Item("purple_wool", Component.getBuilder().build()));
public static Item PURPUR_BLOCK = register(new Item("purpur_block", Component.getBuilder().build()));
public static Item PURPUR_PILLAR = register(new Item("purpur_pillar", Component.getBuilder().build()));
public static Item PURPUR_SLAB = register(new Item("purpur_slab", Component.getBuilder().build()));
public static Item PURPUR_STAIRS = register(new Item("purpur_stairs", Component.getBuilder().build()));
public static Item QUARTZ = register(new Item("quartz", Component.getBuilder().build()));
public static Item QUARTZ_BLOCK = register(new Item("quartz_block", Component.getBuilder().build()));
public static Item QUARTZ_BRICKS = register(new Item("quartz_bricks", Component.getBuilder().build()));
public static Item QUARTZ_PILLAR = register(new Item("quartz_pillar", Component.getBuilder().build()));
public static Item QUARTZ_SLAB = register(new Item("quartz_slab", Component.getBuilder().build()));
public static Item QUARTZ_STAIRS = register(new Item("quartz_stairs", Component.getBuilder().build()));
public static Item RABBIT = register(new Item("rabbit", Component.getBuilder().build()));
public static Item RABBIT_FOOT = register(new Item("rabbit_foot", Component.getBuilder().build()));
public static Item RABBIT_HIDE = register(new Item("rabbit_hide", Component.getBuilder().build()));
public static Item RABBIT_SPAWN_EGG = register(new Item("rabbit_spawn_egg", Component.getBuilder().build()));
public static Item RABBIT_STEW = register(new Item("rabbit_stew", Component.getBuilder().setMaxStackSize(1).build()));
public static Item RAIL = register(new Item("rail", Component.getBuilder().build()));
public static Item RAISER_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("raiser_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item RAVAGER_SPAWN_EGG = register(new Item("ravager_spawn_egg", Component.getBuilder().build()));
public static Item RAW_COPPER = register(new Item("raw_copper", Component.getBuilder().build()));
public static Item RAW_COPPER_BLOCK = register(new Item("raw_copper_block", Component.getBuilder().build()));
public static Item RAW_GOLD = register(new Item("raw_gold", Component.getBuilder().build()));
public static Item RAW_GOLD_BLOCK = register(new Item("raw_gold_block", Component.getBuilder().build()));
public static Item RAW_IRON = register(new Item("raw_iron", Component.getBuilder().build()));
public static Item RAW_IRON_BLOCK = register(new Item("raw_iron_block", Component.getBuilder().build()));
public static Item RECOVERY_COMPASS = register(new Item("recovery_compass", Component.getBuilder().build()));
public static Item RED_BANNER = register(new Item("red_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item RED_BED = register(new Item("red_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item RED_CANDLE = register(new Item("red_candle", Component.getBuilder().build()));
public static Item RED_CARPET = register(new Item("red_carpet", Component.getBuilder().build()));
public static Item RED_CONCRETE = register(new Item("red_concrete", Component.getBuilder().build()));
public static Item RED_CONCRETE_POWDER = register(new Item("red_concrete_powder", Component.getBuilder().build()));
public static Item RED_DYE = register(new Item("red_dye", Component.getBuilder().build()));
public static Item RED_GLAZED_TERRACOTTA = register(new Item("red_glazed_terracotta", Component.getBuilder().build()));
public static Item RED_MUSHROOM = register(new Item("red_mushroom", Component.getBuilder().build()));
public static Item RED_MUSHROOM_BLOCK = register(new Item("red_mushroom_block", Component.getBuilder().build()));
public static Item RED_NETHER_BRICK_SLAB = register(new Item("red_nether_brick_slab", Component.getBuilder().build()));
public static Item RED_NETHER_BRICK_STAIRS = register(new Item("red_nether_brick_stairs", Component.getBuilder().build()));
public static Item RED_NETHER_BRICK_WALL = register(new Item("red_nether_brick_wall", Component.getBuilder().build()));
public static Item RED_NETHER_BRICKS = register(new Item("red_nether_bricks", Component.getBuilder().build()));
public static Item RED_SAND = register(new Item("red_sand", Component.getBuilder().build()));
public static Item RED_SANDSTONE = register(new Item("red_sandstone", Component.getBuilder().build()));
public static Item RED_SANDSTONE_SLAB = register(new Item("red_sandstone_slab", Component.getBuilder().build()));
public static Item RED_SANDSTONE_STAIRS = register(new Item("red_sandstone_stairs", Component.getBuilder().build()));
public static Item RED_SANDSTONE_WALL = register(new Item("red_sandstone_wall", Component.getBuilder().build()));
public static Item RED_SHULKER_BOX = register(new Item("red_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item RED_STAINED_GLASS = register(new Item("red_stained_glass", Component.getBuilder().build()));
public static Item RED_STAINED_GLASS_PANE = register(new Item("red_stained_glass_pane", Component.getBuilder().build()));
public static Item RED_TERRACOTTA = register(new Item("red_terracotta", Component.getBuilder().build()));
public static Item RED_TULIP = register(new Item("red_tulip", Component.getBuilder().build()));
public static Item RED_WOOL = register(new Item("red_wool", Component.getBuilder().build()));
public static Item REDSTONE = register(new Item("redstone", Component.getBuilder().build()));
public static Item REDSTONE_BLOCK = register(new Item("redstone_block", Component.getBuilder().build()));
public static Item REDSTONE_LAMP = register(new Item("redstone_lamp", Component.getBuilder().build()));
public static Item REDSTONE_ORE = register(new Item("redstone_ore", Component.getBuilder().build()));
public static Item REDSTONE_TORCH = register(new Item("redstone_torch", Component.getBuilder().build()));
public static Item REINFORCED_DEEPSLATE = register(new Item("reinforced_deepslate", Component.getBuilder().build()));
public static Item REPEATER = register(new Item("repeater", Component.getBuilder().build()));
public static Item REPEATING_COMMAND_BLOCK = register(new Item("repeating_command_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item RESPAWN_ANCHOR = register(new Item("respawn_anchor", Component.getBuilder().build()));
public static Item RIB_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("rib_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item ROOTED_DIRT = register(new Item("rooted_dirt", Component.getBuilder().build()));
public static Item ROSE_BUSH = register(new Item("rose_bush", Component.getBuilder().build()));
public static Item ROTTEN_FLESH = register(new Item("rotten_flesh", Component.getBuilder().build()));
public static Item SADDLE = register(new Item("saddle", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SALMON = register(new Item("salmon", Component.getBuilder().build()));
public static Item SALMON_BUCKET = register(new Item("salmon_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SALMON_SPAWN_EGG = register(new Item("salmon_spawn_egg", Component.getBuilder().build()));
public static Item SAND = register(new Item("sand", Component.getBuilder().build()));
public static Item SANDSTONE = register(new Item("sandstone", Component.getBuilder().build()));
public static Item SANDSTONE_SLAB = register(new Item("sandstone_slab", Component.getBuilder().build()));
public static Item SANDSTONE_STAIRS = register(new Item("sandstone_stairs", Component.getBuilder().build()));
public static Item SANDSTONE_WALL = register(new Item("sandstone_wall", Component.getBuilder().build()));
public static Item SCAFFOLDING = register(new Item("scaffolding", Component.getBuilder().build()));
public static Item SCRAPE_POTTERY_SHERD = register(new Item("scrape_pottery_sherd", Component.getBuilder().build()));
public static Item SCULK = register(new Item("sculk", Component.getBuilder().build()));
public static Item SCULK_CATALYST = register(new Item("sculk_catalyst", Component.getBuilder().build()));
public static Item SCULK_SENSOR = register(new Item("sculk_sensor", Component.getBuilder().build()));
public static Item SCULK_SHRIEKER = register(new Item("sculk_shrieker", Component.getBuilder().build()));
public static Item SCULK_VEIN = register(new Item("sculk_vein", Component.getBuilder().build()));
public static Item SEA_LANTERN = register(new Item("sea_lantern", Component.getBuilder().build()));
public static Item SEA_PICKLE = register(new Item("sea_pickle", Component.getBuilder().build()));
public static Item SEAGRASS = register(new Item("seagrass", Component.getBuilder().build()));
public static Item SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("sentry_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("shaper_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item SHEAF_POTTERY_SHERD = register(new Item("sheaf_pottery_sherd", Component.getBuilder().build()));
public static Item SHEARS = register(new Item("shears", Component.getBuilder().setMaxDamage(238).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:leaves"), false, 15.0d), new ToolRule(List.of("#minecraft:wool"), false, 5.0d), new ToolRule(List.of("minecraft:vine", "minecraft:glow_lichen"), false, 2.0d)).setDamagePerBlock(2)).build()));
public static Item SHEEP_SPAWN_EGG = register(new Item("sheep_spawn_egg", Component.getBuilder().build()));
public static Item SHELTER_POTTERY_SHERD = register(new Item("shelter_pottery_sherd", Component.getBuilder().build()));
public static Item SHIELD = register(new Item("shield", Component.getBuilder().setMaxDamage(336).setMaxStackSize(1).build()));
public static Item SHORT_GRASS = register(new Item("short_grass", Component.getBuilder().build()));
public static Item SHROOMLIGHT = register(new Item("shroomlight", Component.getBuilder().build()));
public static Item SHULKER_BOX = register(new Item("shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SHULKER_SHELL = register(new Item("shulker_shell", Component.getBuilder().build()));
public static Item SHULKER_SPAWN_EGG = register(new Item("shulker_spawn_egg", Component.getBuilder().build()));
public static Item SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("silence_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item SILVERFISH_SPAWN_EGG = register(new Item("silverfish_spawn_egg", Component.getBuilder().build()));
public static Item SKELETON_HORSE_SPAWN_EGG = register(new Item("skeleton_horse_spawn_egg", Component.getBuilder().build()));
public static Item SKELETON_SKULL = register(new Item("skeleton_skull", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item SKELETON_SPAWN_EGG = register(new Item("skeleton_spawn_egg", Component.getBuilder().build()));
public static Item SKULL_BANNER_PATTERN = register(new Item("skull_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
public static Item SKULL_POTTERY_SHERD = register(new Item("skull_pottery_sherd", Component.getBuilder().build()));
public static Item SLIME_BALL = register(new Item("slime_ball", Component.getBuilder().build()));
public static Item SLIME_BLOCK = register(new Item("slime_block", Component.getBuilder().build()));
public static Item SLIME_SPAWN_EGG = register(new Item("slime_spawn_egg", Component.getBuilder().build()));
public static Item SMALL_AMETHYST_BUD = register(new Item("small_amethyst_bud", Component.getBuilder().build()));
public static Item SMALL_DRIPLEAF = register(new Item("small_dripleaf", Component.getBuilder().build()));
public static Item SMITHING_TABLE = register(new Item("smithing_table", Component.getBuilder().build()));
public static Item SMOKER = register(new Item("smoker", Component.getBuilder().build()));
public static Item SMOOTH_BASALT = register(new Item("smooth_basalt", Component.getBuilder().build()));
public static Item SMOOTH_QUARTZ = register(new Item("smooth_quartz", Component.getBuilder().build()));
public static Item SMOOTH_QUARTZ_SLAB = register(new Item("smooth_quartz_slab", Component.getBuilder().build()));
public static Item SMOOTH_QUARTZ_STAIRS = register(new Item("smooth_quartz_stairs", Component.getBuilder().build()));
public static Item SMOOTH_RED_SANDSTONE = register(new Item("smooth_red_sandstone", Component.getBuilder().build()));
public static Item SMOOTH_RED_SANDSTONE_SLAB = register(new Item("smooth_red_sandstone_slab", Component.getBuilder().build()));
public static Item SMOOTH_RED_SANDSTONE_STAIRS = register(new Item("smooth_red_sandstone_stairs", Component.getBuilder().build()));
public static Item SMOOTH_SANDSTONE = register(new Item("smooth_sandstone", Component.getBuilder().build()));
public static Item SMOOTH_SANDSTONE_SLAB = register(new Item("smooth_sandstone_slab", Component.getBuilder().build()));
public static Item SMOOTH_SANDSTONE_STAIRS = register(new Item("smooth_sandstone_stairs", Component.getBuilder().build()));
public static Item SMOOTH_STONE = register(new Item("smooth_stone", Component.getBuilder().build()));
public static Item SMOOTH_STONE_SLAB = register(new Item("smooth_stone_slab", Component.getBuilder().build()));
public static Item SNIFFER_EGG = register(new Item("sniffer_egg", Component.getBuilder().build()));
public static Item SNIFFER_SPAWN_EGG = register(new Item("sniffer_spawn_egg", Component.getBuilder().build()));
public static Item SNORT_POTTERY_SHERD = register(new Item("snort_pottery_sherd", Component.getBuilder().build()));
public static Item SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("snout_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item SNOW = register(new Item("snow", Component.getBuilder().build()));
public static Item SNOW_BLOCK = register(new Item("snow_block", Component.getBuilder().build()));
public static Item SNOW_GOLEM_SPAWN_EGG = register(new Item("snow_golem_spawn_egg", Component.getBuilder().build()));
public static Item SNOWBALL = register(new Item("snowball", Component.getBuilder().setMaxStackSize(16).build()));
public static Item SOUL_CAMPFIRE = register(new Item("soul_campfire", Component.getBuilder().build()));
public static Item SOUL_LANTERN = register(new Item("soul_lantern", Component.getBuilder().build()));
public static Item SOUL_SAND = register(new Item("soul_sand", Component.getBuilder().build()));
public static Item SOUL_SOIL = register(new Item("soul_soil", Component.getBuilder().build()));
public static Item SOUL_TORCH = register(new Item("soul_torch", Component.getBuilder().build()));
public static Item SPAWNER = register(new Item("spawner", Component.getBuilder().build()));
public static Item SPECTRAL_ARROW = register(new Item("spectral_arrow", Component.getBuilder().build()));
public static Item SPIDER_EYE = register(new Item("spider_eye", Component.getBuilder().build()));
public static Item SPIDER_SPAWN_EGG = register(new Item("spider_spawn_egg", Component.getBuilder().build()));
public static Item SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("spire_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item SPLASH_POTION = register(new Item("splash_potion", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SPONGE = register(new Item("sponge", Component.getBuilder().build()));
public static Item SPORE_BLOSSOM = register(new Item("spore_blossom", Component.getBuilder().build()));
public static Item SPRUCE_BOAT = register(new Item("spruce_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SPRUCE_BUTTON = register(new Item("spruce_button", Component.getBuilder().build()));
public static Item SPRUCE_CHEST_BOAT = register(new Item("spruce_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SPRUCE_DOOR = register(new Item("spruce_door", Component.getBuilder().build()));
public static Item SPRUCE_FENCE = register(new Item("spruce_fence", Component.getBuilder().build()));
public static Item SPRUCE_FENCE_GATE = register(new Item("spruce_fence_gate", Component.getBuilder().build()));
public static Item SPRUCE_HANGING_SIGN = register(new Item("spruce_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item SPRUCE_LEAVES = register(new Item("spruce_leaves", Component.getBuilder().build()));
public static Item SPRUCE_LOG = register(new Item("spruce_log", Component.getBuilder().build()));
public static Item SPRUCE_PLANKS = register(new Item("spruce_planks", Component.getBuilder().build()));
public static Item SPRUCE_PRESSURE_PLATE = register(new Item("spruce_pressure_plate", Component.getBuilder().build()));
public static Item SPRUCE_SAPLING = register(new Item("spruce_sapling", Component.getBuilder().build()));
public static Item SPRUCE_SIGN = register(new Item("spruce_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item SPRUCE_SLAB = register(new Item("spruce_slab", Component.getBuilder().build()));
public static Item SPRUCE_STAIRS = register(new Item("spruce_stairs", Component.getBuilder().build()));
public static Item SPRUCE_TRAPDOOR = register(new Item("spruce_trapdoor", Component.getBuilder().build()));
public static Item SPRUCE_WOOD = register(new Item("spruce_wood", Component.getBuilder().build()));
public static Item SPYGLASS = register(new Item("spyglass", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SQUID_SPAWN_EGG = register(new Item("squid_spawn_egg", Component.getBuilder().build()));
public static Item STICK = register(new Item("stick", Component.getBuilder().build()));
public static Item STICKY_PISTON = register(new Item("sticky_piston", Component.getBuilder().build()));
public static Item STONE = register(new Item("stone", Component.getBuilder().build()));
public static Item STONE_AXE = register(new Item("stone_axe", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 4.0d)).setDamagePerBlock(2)).build()));
public static Item STONE_BRICK_SLAB = register(new Item("stone_brick_slab", Component.getBuilder().build()));
public static Item STONE_BRICK_STAIRS = register(new Item("stone_brick_stairs", Component.getBuilder().build()));
public static Item STONE_BRICK_WALL = register(new Item("stone_brick_wall", Component.getBuilder().build()));
public static Item STONE_BRICKS = register(new Item("stone_bricks", Component.getBuilder().build()));
public static Item STONE_BUTTON = register(new Item("stone_button", Component.getBuilder().build()));
public static Item STONE_HOE = register(new Item("stone_hoe", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 4.0d)).setDamagePerBlock(2)).build()));
public static Item STONE_PICKAXE = register(new Item("stone_pickaxe", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 4.0d)).setDamagePerBlock(2)).build()));
public static Item STONE_PRESSURE_PLATE = register(new Item("stone_pressure_plate", Component.getBuilder().build()));
public static Item STONE_SHOVEL = register(new Item("stone_shovel", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 4.0d)).setDamagePerBlock(2)).build()));
public static Item STONE_SLAB = register(new Item("stone_slab", Component.getBuilder().build()));
public static Item STONE_STAIRS = register(new Item("stone_stairs", Component.getBuilder().build()));
public static Item STONE_SWORD = register(new Item("stone_sword", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
public static Item STONECUTTER = register(new Item("stonecutter", Component.getBuilder().build()));
public static Item STRAY_SPAWN_EGG = register(new Item("stray_spawn_egg", Component.getBuilder().build()));
public static Item STRIDER_SPAWN_EGG = register(new Item("strider_spawn_egg", Component.getBuilder().build()));
public static Item STRING = register(new Item("string", Component.getBuilder().build()));
public static Item STRIPPED_ACACIA_LOG = register(new Item("stripped_acacia_log", Component.getBuilder().build()));
public static Item STRIPPED_ACACIA_WOOD = register(new Item("stripped_acacia_wood", Component.getBuilder().build()));
public static Item STRIPPED_BAMBOO_BLOCK = register(new Item("stripped_bamboo_block", Component.getBuilder().build()));
public static Item STRIPPED_BIRCH_LOG = register(new Item("stripped_birch_log", Component.getBuilder().build()));
public static Item STRIPPED_BIRCH_WOOD = register(new Item("stripped_birch_wood", Component.getBuilder().build()));
public static Item STRIPPED_CHERRY_LOG = register(new Item("stripped_cherry_log", Component.getBuilder().build()));
public static Item STRIPPED_CHERRY_WOOD = register(new Item("stripped_cherry_wood", Component.getBuilder().build()));
public static Item STRIPPED_CRIMSON_HYPHAE = register(new Item("stripped_crimson_hyphae", Component.getBuilder().build()));
public static Item STRIPPED_CRIMSON_STEM = register(new Item("stripped_crimson_stem", Component.getBuilder().build()));
public static Item STRIPPED_DARK_OAK_LOG = register(new Item("stripped_dark_oak_log", Component.getBuilder().build()));
public static Item STRIPPED_DARK_OAK_WOOD = register(new Item("stripped_dark_oak_wood", Component.getBuilder().build()));
public static Item STRIPPED_JUNGLE_LOG = register(new Item("stripped_jungle_log", Component.getBuilder().build()));
public static Item STRIPPED_JUNGLE_WOOD = register(new Item("stripped_jungle_wood", Component.getBuilder().build()));
public static Item STRIPPED_MANGROVE_LOG = register(new Item("stripped_mangrove_log", Component.getBuilder().build()));
public static Item STRIPPED_MANGROVE_WOOD = register(new Item("stripped_mangrove_wood", Component.getBuilder().build()));
public static Item STRIPPED_OAK_LOG = register(new Item("stripped_oak_log", Component.getBuilder().build()));
public static Item STRIPPED_OAK_WOOD = register(new Item("stripped_oak_wood", Component.getBuilder().build()));
public static Item STRIPPED_SPRUCE_LOG = register(new Item("stripped_spruce_log", Component.getBuilder().build()));
public static Item STRIPPED_SPRUCE_WOOD = register(new Item("stripped_spruce_wood", Component.getBuilder().build()));
public static Item STRIPPED_WARPED_HYPHAE = register(new Item("stripped_warped_hyphae", Component.getBuilder().build()));
public static Item STRIPPED_WARPED_STEM = register(new Item("stripped_warped_stem", Component.getBuilder().build()));
public static Item STRUCTURE_BLOCK = register(new Item("structure_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item STRUCTURE_VOID = register(new Item("structure_void", Component.getBuilder().setRarity(Rarity.EPIC).build()));
public static Item SUGAR = register(new Item("sugar", Component.getBuilder().build()));
public static Item SUGAR_CANE = register(new Item("sugar_cane", Component.getBuilder().build()));
public static Item SUNFLOWER = register(new Item("sunflower", Component.getBuilder().build()));
public static Item SUSPICIOUS_GRAVEL = register(new Item("suspicious_gravel", Component.getBuilder().build()));
public static Item SUSPICIOUS_SAND = register(new Item("suspicious_sand", Component.getBuilder().build()));
public static Item SUSPICIOUS_STEW = register(new Item("suspicious_stew", Component.getBuilder().setMaxStackSize(1).build()));
public static Item SWEET_BERRIES = register(new Item("sweet_berries", Component.getBuilder().build()));
public static Item TADPOLE_BUCKET = register(new Item("tadpole_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item TADPOLE_SPAWN_EGG = register(new Item("tadpole_spawn_egg", Component.getBuilder().build()));
public static Item TALL_GRASS = register(new Item("tall_grass", Component.getBuilder().build()));
public static Item TARGET = register(new Item("target", Component.getBuilder().build()));
public static Item TERRACOTTA = register(new Item("terracotta", Component.getBuilder().build()));
public static Item TIDE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("tide_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item TINTED_GLASS = register(new Item("tinted_glass", Component.getBuilder().build()));
public static Item TIPPED_ARROW = register(new Item("tipped_arrow", Component.getBuilder().build()));
public static Item TNT = register(new Item("tnt", Component.getBuilder().build()));
public static Item TNT_MINECART = register(new Item("tnt_minecart", Component.getBuilder().setMaxStackSize(1).build()));
public static Item TORCH = register(new Item("torch", Component.getBuilder().build()));
public static Item TORCHFLOWER = register(new Item("torchflower", Component.getBuilder().build()));
public static Item TORCHFLOWER_SEEDS = register(new Item("torchflower_seeds", Component.getBuilder().build()));
public static Item TOTEM_OF_UNDYING = register(new Item("totem_of_undying", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
public static Item TRADER_LLAMA_SPAWN_EGG = register(new Item("trader_llama_spawn_egg", Component.getBuilder().build()));
public static Item TRAPPED_CHEST = register(new Item("trapped_chest", Component.getBuilder().build()));
public static Item TRIAL_KEY = register(new Item("trial_key", Component.getBuilder().build()));
public static Item TRIAL_SPAWNER = register(new Item("trial_spawner", Component.getBuilder().build()));
public static Item TRIDENT = register(new Item("trident", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
public static Item TRIPWIRE_HOOK = register(new Item("tripwire_hook", Component.getBuilder().build()));
public static Item TROPICAL_FISH = register(new Item("tropical_fish", Component.getBuilder().build()));
public static Item TROPICAL_FISH_BUCKET = register(new Item("tropical_fish_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item TROPICAL_FISH_SPAWN_EGG = register(new Item("tropical_fish_spawn_egg", Component.getBuilder().build()));
public static Item TUBE_CORAL = register(new Item("tube_coral", Component.getBuilder().build()));
public static Item TUBE_CORAL_BLOCK = register(new Item("tube_coral_block", Component.getBuilder().build()));
public static Item TUBE_CORAL_FAN = register(new Item("tube_coral_fan", Component.getBuilder().build()));
public static Item TUFF = register(new Item("tuff", Component.getBuilder().build()));
public static Item TUFF_BRICK_SLAB = register(new Item("tuff_brick_slab", Component.getBuilder().build()));
public static Item TUFF_BRICK_STAIRS = register(new Item("tuff_brick_stairs", Component.getBuilder().build()));
public static Item TUFF_BRICK_WALL = register(new Item("tuff_brick_wall", Component.getBuilder().build()));
public static Item TUFF_BRICKS = register(new Item("tuff_bricks", Component.getBuilder().build()));
public static Item TUFF_SLAB = register(new Item("tuff_slab", Component.getBuilder().build()));
public static Item TUFF_STAIRS = register(new Item("tuff_stairs", Component.getBuilder().build()));
public static Item TUFF_WALL = register(new Item("tuff_wall", Component.getBuilder().build()));
public static Item TURTLE_EGG = register(new Item("turtle_egg", Component.getBuilder().build()));
public static Item TURTLE_HELMET = register(new Item("turtle_helmet", Component.getBuilder().setMaxDamage(275).setMaxStackSize(1).build()));
public static Item TURTLE_SCUTE = register(new Item("turtle_scute", Component.getBuilder().build()));
public static Item TURTLE_SPAWN_EGG = register(new Item("turtle_spawn_egg", Component.getBuilder().build()));
public static Item TWISTING_VINES = register(new Item("twisting_vines", Component.getBuilder().build()));
public static Item VAULT = register(new Item("vault", Component.getBuilder().build()));
public static Item VERDANT_FROGLIGHT = register(new Item("verdant_froglight", Component.getBuilder().build()));
public static Item VEX_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("vex_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item VEX_SPAWN_EGG = register(new Item("vex_spawn_egg", Component.getBuilder().build()));
public static Item VILLAGER_SPAWN_EGG = register(new Item("villager_spawn_egg", Component.getBuilder().build()));
public static Item VINDICATOR_SPAWN_EGG = register(new Item("vindicator_spawn_egg", Component.getBuilder().build()));
public static Item VINE = register(new Item("vine", Component.getBuilder().build()));
public static Item WANDERING_TRADER_SPAWN_EGG = register(new Item("wandering_trader_spawn_egg", Component.getBuilder().build()));
public static Item WARD_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("ward_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item WARDEN_SPAWN_EGG = register(new Item("warden_spawn_egg", Component.getBuilder().build()));
public static Item WARPED_BUTTON = register(new Item("warped_button", Component.getBuilder().build()));
public static Item WARPED_DOOR = register(new Item("warped_door", Component.getBuilder().build()));
public static Item WARPED_FENCE = register(new Item("warped_fence", Component.getBuilder().build()));
public static Item WARPED_FENCE_GATE = register(new Item("warped_fence_gate", Component.getBuilder().build()));
public static Item WARPED_FUNGUS = register(new Item("warped_fungus", Component.getBuilder().build()));
public static Item WARPED_FUNGUS_ON_A_STICK = register(new Item("warped_fungus_on_a_stick", Component.getBuilder().setMaxDamage(100).setMaxStackSize(1).build()));
public static Item WARPED_HANGING_SIGN = register(new Item("warped_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item WARPED_HYPHAE = register(new Item("warped_hyphae", Component.getBuilder().build()));
public static Item WARPED_NYLIUM = register(new Item("warped_nylium", Component.getBuilder().build()));
public static Item WARPED_PLANKS = register(new Item("warped_planks", Component.getBuilder().build()));
public static Item WARPED_PRESSURE_PLATE = register(new Item("warped_pressure_plate", Component.getBuilder().build()));
public static Item WARPED_ROOTS = register(new Item("warped_roots", Component.getBuilder().build()));
public static Item WARPED_SIGN = register(new Item("warped_sign", Component.getBuilder().setMaxStackSize(16).build()));
public static Item WARPED_SLAB = register(new Item("warped_slab", Component.getBuilder().build()));
public static Item WARPED_STAIRS = register(new Item("warped_stairs", Component.getBuilder().build()));
public static Item WARPED_STEM = register(new Item("warped_stem", Component.getBuilder().build()));
public static Item WARPED_TRAPDOOR = register(new Item("warped_trapdoor", Component.getBuilder().build()));
public static Item WARPED_WART_BLOCK = register(new Item("warped_wart_block", Component.getBuilder().build()));
public static Item WATER_BUCKET = register(new Item("water_bucket", Component.getBuilder().setMaxStackSize(1).build()));
public static Item WAXED_CHISELED_COPPER = register(new Item("waxed_chiseled_copper", Component.getBuilder().build()));
public static Item WAXED_COPPER_BLOCK = register(new Item("waxed_copper_block", Component.getBuilder().build()));
public static Item WAXED_COPPER_BULB = register(new Item("waxed_copper_bulb", Component.getBuilder().build()));
public static Item WAXED_COPPER_DOOR = register(new Item("waxed_copper_door", Component.getBuilder().build()));
public static Item WAXED_COPPER_GRATE = register(new Item("waxed_copper_grate", Component.getBuilder().build()));
public static Item WAXED_COPPER_TRAPDOOR = register(new Item("waxed_copper_trapdoor", Component.getBuilder().build()));
public static Item WAXED_CUT_COPPER = register(new Item("waxed_cut_copper", Component.getBuilder().build()));
public static Item WAXED_CUT_COPPER_SLAB = register(new Item("waxed_cut_copper_slab", Component.getBuilder().build()));
public static Item WAXED_CUT_COPPER_STAIRS = register(new Item("waxed_cut_copper_stairs", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_CHISELED_COPPER = register(new Item("waxed_exposed_chiseled_copper", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_COPPER = register(new Item("waxed_exposed_copper", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_COPPER_BULB = register(new Item("waxed_exposed_copper_bulb", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_COPPER_DOOR = register(new Item("waxed_exposed_copper_door", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_COPPER_GRATE = register(new Item("waxed_exposed_copper_grate", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_COPPER_TRAPDOOR = register(new Item("waxed_exposed_copper_trapdoor", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_CUT_COPPER = register(new Item("waxed_exposed_cut_copper", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_CUT_COPPER_SLAB = register(new Item("waxed_exposed_cut_copper_slab", Component.getBuilder().build()));
public static Item WAXED_EXPOSED_CUT_COPPER_STAIRS = register(new Item("waxed_exposed_cut_copper_stairs", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_CHISELED_COPPER = register(new Item("waxed_oxidized_chiseled_copper", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_COPPER = register(new Item("waxed_oxidized_copper", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_COPPER_BULB = register(new Item("waxed_oxidized_copper_bulb", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_COPPER_DOOR = register(new Item("waxed_oxidized_copper_door", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_COPPER_GRATE = register(new Item("waxed_oxidized_copper_grate", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_COPPER_TRAPDOOR = register(new Item("waxed_oxidized_copper_trapdoor", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_CUT_COPPER = register(new Item("waxed_oxidized_cut_copper", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_CUT_COPPER_SLAB = register(new Item("waxed_oxidized_cut_copper_slab", Component.getBuilder().build()));
public static Item WAXED_OXIDIZED_CUT_COPPER_STAIRS = register(new Item("waxed_oxidized_cut_copper_stairs", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_CHISELED_COPPER = register(new Item("waxed_weathered_chiseled_copper", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_COPPER = register(new Item("waxed_weathered_copper", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_COPPER_BULB = register(new Item("waxed_weathered_copper_bulb", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_COPPER_DOOR = register(new Item("waxed_weathered_copper_door", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_COPPER_GRATE = register(new Item("waxed_weathered_copper_grate", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_COPPER_TRAPDOOR = register(new Item("waxed_weathered_copper_trapdoor", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_CUT_COPPER = register(new Item("waxed_weathered_cut_copper", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_CUT_COPPER_SLAB = register(new Item("waxed_weathered_cut_copper_slab", Component.getBuilder().build()));
public static Item WAXED_WEATHERED_CUT_COPPER_STAIRS = register(new Item("waxed_weathered_cut_copper_stairs", Component.getBuilder().build()));
public static Item WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("wayfinder_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item WEATHERED_CHISELED_COPPER = register(new Item("weathered_chiseled_copper", Component.getBuilder().build()));
public static Item WEATHERED_COPPER = register(new Item("weathered_copper", Component.getBuilder().build()));
public static Item WEATHERED_COPPER_BULB = register(new Item("weathered_copper_bulb", Component.getBuilder().build()));
public static Item WEATHERED_COPPER_DOOR = register(new Item("weathered_copper_door", Component.getBuilder().build()));
public static Item WEATHERED_COPPER_GRATE = register(new Item("weathered_copper_grate", Component.getBuilder().build()));
public static Item WEATHERED_COPPER_TRAPDOOR = register(new Item("weathered_copper_trapdoor", Component.getBuilder().build()));
public static Item WEATHERED_CUT_COPPER = register(new Item("weathered_cut_copper", Component.getBuilder().build()));
public static Item WEATHERED_CUT_COPPER_SLAB = register(new Item("weathered_cut_copper_slab", Component.getBuilder().build()));
public static Item WEATHERED_CUT_COPPER_STAIRS = register(new Item("weathered_cut_copper_stairs", Component.getBuilder().build()));
public static Item WEEPING_VINES = register(new Item("weeping_vines", Component.getBuilder().build()));
public static Item WET_SPONGE = register(new Item("wet_sponge", Component.getBuilder().build()));
public static Item WHEAT = register(new Item("wheat", Component.getBuilder().build()));
public static Item WHEAT_SEEDS = register(new Item("wheat_seeds", Component.getBuilder().build()));
public static Item WHITE_BANNER = register(new Item("white_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item WHITE_BED = register(new Item("white_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item WHITE_CANDLE = register(new Item("white_candle", Component.getBuilder().build()));
public static Item WHITE_CARPET = register(new Item("white_carpet", Component.getBuilder().build()));
public static Item WHITE_CONCRETE = register(new Item("white_concrete", Component.getBuilder().build()));
public static Item WHITE_CONCRETE_POWDER = register(new Item("white_concrete_powder", Component.getBuilder().build()));
public static Item WHITE_DYE = register(new Item("white_dye", Component.getBuilder().build()));
public static Item WHITE_GLAZED_TERRACOTTA = register(new Item("white_glazed_terracotta", Component.getBuilder().build()));
public static Item WHITE_SHULKER_BOX = register(new Item("white_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item WHITE_STAINED_GLASS = register(new Item("white_stained_glass", Component.getBuilder().build()));
public static Item WHITE_STAINED_GLASS_PANE = register(new Item("white_stained_glass_pane", Component.getBuilder().build()));
public static Item WHITE_TERRACOTTA = register(new Item("white_terracotta", Component.getBuilder().build()));
public static Item WHITE_TULIP = register(new Item("white_tulip", Component.getBuilder().build()));
public static Item WHITE_WOOL = register(new Item("white_wool", Component.getBuilder().build()));
public static Item WILD_ARMOR_TRIM_SMITHING_TEMPLATE = register(new Item("wild_armor_trim_smithing_template", Component.getBuilder().build()));
public static Item WIND_CHARGE = register(new Item("wind_charge", Component.getBuilder().build()));
public static Item WITCH_SPAWN_EGG = register(new Item("witch_spawn_egg", Component.getBuilder().build()));
public static Item WITHER_ROSE = register(new Item("wither_rose", Component.getBuilder().build()));
public static Item WITHER_SKELETON_SKULL = register(new Item("wither_skeleton_skull", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item WITHER_SKELETON_SPAWN_EGG = register(new Item("wither_skeleton_spawn_egg", Component.getBuilder().build()));
public static Item WITHER_SPAWN_EGG = register(new Item("wither_spawn_egg", Component.getBuilder().build()));
public static Item WOLF_ARMOR = register(new Item("wolf_armor", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
public static Item WOLF_SPAWN_EGG = register(new Item("wolf_spawn_egg", Component.getBuilder().build()));
public static Item WOODEN_AXE = register(new Item("wooden_axe", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 2.0d)).setDamagePerBlock(2)).build()));
public static Item WOODEN_HOE = register(new Item("wooden_hoe", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 2.0d)).setDamagePerBlock(2)).build()));
public static Item WOODEN_PICKAXE = register(new Item("wooden_pickaxe", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 2.0d)).setDamagePerBlock(2)).build()));
public static Item WOODEN_SHOVEL = register(new Item("wooden_shovel", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 2.0d)).setDamagePerBlock(2)).build()));
public static Item WOODEN_SWORD = register(new Item("wooden_sword", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
public static Item WRITABLE_BOOK = register(new Item("writable_book", Component.getBuilder().setMaxStackSize(1).build()));
public static Item WRITTEN_BOOK = register(new Item("written_book", Component.getBuilder().setMaxStackSize(16).setEnchantmentGlintOverride(true).build()));
public static Item YELLOW_BANNER = register(new Item("yellow_banner", Component.getBuilder().setMaxStackSize(16).build()));
public static Item YELLOW_BED = register(new Item("yellow_bed", Component.getBuilder().setMaxStackSize(1).build()));
public static Item YELLOW_CANDLE = register(new Item("yellow_candle", Component.getBuilder().build()));
public static Item YELLOW_CARPET = register(new Item("yellow_carpet", Component.getBuilder().build()));
public static Item YELLOW_CONCRETE = register(new Item("yellow_concrete", Component.getBuilder().build()));
public static Item YELLOW_CONCRETE_POWDER = register(new Item("yellow_concrete_powder", Component.getBuilder().build()));
public static Item YELLOW_DYE = register(new Item("yellow_dye", Component.getBuilder().build()));
public static Item YELLOW_GLAZED_TERRACOTTA = register(new Item("yellow_glazed_terracotta", Component.getBuilder().build()));
public static Item YELLOW_SHULKER_BOX = register(new Item("yellow_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
public static Item YELLOW_STAINED_GLASS = register(new Item("yellow_stained_glass", Component.getBuilder().build()));
public static Item YELLOW_STAINED_GLASS_PANE = register(new Item("yellow_stained_glass_pane", Component.getBuilder().build()));
public static Item YELLOW_TERRACOTTA = register(new Item("yellow_terracotta", Component.getBuilder().build()));
public static Item YELLOW_WOOL = register(new Item("yellow_wool", Component.getBuilder().build()));
public static Item ZOGLIN_SPAWN_EGG = register(new Item("zoglin_spawn_egg", Component.getBuilder().build()));
public static Item ZOMBIE_HEAD = register(new Item("zombie_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
public static Item ZOMBIE_HORSE_SPAWN_EGG = register(new Item("zombie_horse_spawn_egg", Component.getBuilder().build()));
public static Item ZOMBIE_SPAWN_EGG = register(new Item("zombie_spawn_egg", Component.getBuilder().build()));
public static Item ZOMBIE_VILLAGER_SPAWN_EGG = register(new Item("zombie_villager_spawn_egg", Component.getBuilder().build()));
public static Item ZOMBIFIED_PIGLIN_SPAWN_EGG = register(new Item("zombified_piglin_spawn_egg", Component.getBuilder().build()));
